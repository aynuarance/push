<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二、爬虫入门</title>
      <link href="/2023/06/06/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
      <url>/2023/06/06/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="爬虫入门"><a href="#爬虫入门" class="headerlink" title="爬虫入门"></a>爬虫入门</h1><h2 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫?"></a>什么是爬虫?</h2><p>不知道各位是否遇到过这样的需求. 就是我们总是希望能够保存互联网上的一些重要的数据信息为己所用. </p><p>比如,   </p><ul><li>在浏览到一些优秀的让人血脉喷张的图片时. 总想保存起来留为日后做桌面上的壁纸</li><li>在浏览到一些重要的数据时(各行各业), 希望保留下来日后为自己进行各种销售行为增光添彩</li><li>在浏览到一些奇奇怪怪的劲爆视频时, 希望保存在硬盘里供日后慢慢品鉴</li><li>在浏览到一些十分优秀的歌声曲目时, 希望保存下来供我们在烦闷的生活中增添一份精彩</li></ul><p>那么恭喜你. 本课程将十分的适合于你. 因为爬虫就是通过编写程序来爬取互联网上的优秀资源(图片, 音频, 视频, 数据)</p><p>爬取的一定是 能看见的东西,  公开的一些东西. </p><h2 id="爬虫和Python"><a href="#爬虫和Python" class="headerlink" title="爬虫和Python"></a>爬虫和Python</h2><p>爬虫一定要用Python么?  非也~ 用Java也行, C也可以. 请各位记住, 编程语言只是工具. 抓到数据是你的目的. 用什么工具去达到你的目的都是可以的. 和吃饭一样, 可以用叉子也可以用筷子, 最终的结果都是你能吃到饭. 那为什么大多数人喜欢用Python呢?  答案: 因为Python写爬虫简单.  不理解? 问: 为什么吃米饭不用刀叉? 用筷子?  因为简单! 好用! </p><p>而Python是众多编程语言中, 小白上手最快, 语法最简单. 更重要的是, 这货有非常多的关于爬虫能用到的第三方支持库. 说直白点儿. 就是你用筷子吃饭, 我还附送你一个佣人. 帮你吃! 这样吃的是不是更爽了. 更容易了~</p><h2 id="爬虫合法么"><a href="#爬虫合法么" class="headerlink" title="爬虫合法么?"></a>爬虫合法么?</h2><p>首先, 爬虫在法律上是不被禁止的. 也就是说法律是允许爬虫存在的. 但是, 爬虫也具有违法风险的. 就像菜刀一样, 法律是允许菜刀的存在的. 但是你要是用来砍人, 那对不起. 没人惯着你. 就像王欣说过的, 技术是无罪的. 主要看你用它来干嘛. 比方说有些人就利用爬虫+一些黑客技术每秒钟对着bilibili撸上十万八千次. 那这个肯定是不被允许的. </p><p>爬虫分为善意的爬虫和恶意的爬虫</p><ul><li>善意的爬虫, 不破坏被爬取的网站的资源(正常访问, 一般频率不高, 不窃取用户隐私)</li><li>恶意的爬虫, 影响网站的正常运营(抢票, 秒杀, 疯狂solo网站资源造成网站宕机)</li></ul><p>综上,  为了避免进🍊 我们还是要安分守己. 时常优化自己的爬虫程序避免干扰到网站的正常运行. 并且在使用爬取到的数据时,发现涉及到用户隐私和商业机密等敏感内容时, 一定要及时终止爬取和传播</p><h2 id="爬虫的矛与盾"><a href="#爬虫的矛与盾" class="headerlink" title="爬虫的矛与盾"></a>爬虫的矛与盾</h2><p>反爬机制<br>    门户网站，可以通过制定相应的策略或者技术手段，防止爬虫程序进行网站数据的爬取。</p><p>反反爬策略<br>    爬虫程序可以通过制定相关的策略或者技术手段，破解门户网站中具备的反爬机制，从而可以获取门户网站中相关的数据。</p><p>robots.txt协议：百度蜘蛛<br>    君子协议。规定了网站中哪些数据可以被爬虫爬取哪些数据不可以被爬取。</p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215185111945.png" alt="image-20201215185111945"></p><h2 id="第一个爬虫"><a href="#第一个爬虫" class="headerlink" title="第一个爬虫"></a>第一个爬虫</h2><p>首先,我们还是需要回顾一下爬虫的概念. 爬虫就是我们通过我们写的程序去抓取互联网上的数据资源. 比如, 此时我需要百度的资源. 在不考虑爬虫的情况下, 我们肯定是打开浏览器, 然后输入百度的网址, 紧接着, 我们就能在浏览器上看到百度的内容了.  那换成爬虫呢? 其实道理是一样的. 只不过, 我们需要用代码来模拟一个浏览器, 然后同样的输入百度的网址. 那么我们的程序应该也能拿到百度的内容. 对吧~</p><p>在python中, 我们可以直接用urllib模块来完成对浏览器的模拟工作~, 直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">resp = urlopen(<span class="string">&quot;http://www.baidu.com&quot;</span>)  <span class="comment"># 打开 百度</span></span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 打印 抓取到的内容</span></span><br></pre></td></tr></table></figure><p>是不是很简单呢?</p><p>我们可以把抓取到的html内容全部写入到文件中, 然后和原版的百度进行对比, 看看是否一致</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">resp = urlopen(<span class="string">&quot;http://www.baidu.com&quot;</span>)  <span class="comment"># 打开 百度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(resp.read().decode(&quot;utf-8&quot;))  # 打印 抓取到的内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;baidu.html&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># 创建文件</span></span><br><span class="line">    f.write(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 保存在文件中</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201214183611890.png" alt="image-20201214183611890"></p><p>OK ~ 我们成功的从百度上爬取到了一个页面的源代码. 就是这么简单, 就是这么炫酷. </p><p>你也试一下吧~   </p><h2 id="web请求全过程剖析-重点"><a href="#web请求全过程剖析-重点" class="headerlink" title="web请求全过程剖析(重点)"></a>web请求全过程剖析(重点)</h2><p>上一小节我们实现了一个网页的整体抓取工作. 那么本小节, 给各位好好剖析一下web请求的全部过程, 这样有助于后面我们遇到的各种各样的网站就有了入手的基本准则了. </p><p>那么到底我们浏览器在输入完网址到我们看到网页的整体内容, 这个过程中究竟发生了些什么?</p><p>这里我们以百度为例.  在访问百度的时候, 浏览器会把这一次请求发送到百度的服务器(百度的一台电脑), 由服务器接收到这个请求, 然后加载一些数据. 返回给浏览器, 再由浏览器进行显示. 听起来好像是个废话…但是这里蕴含着一个极为重要的东西在里面, 注意, 百度的服务器返回给浏览器的不直接是页面, 而是页面源代码(由html, css, js组成). 由浏览器把页面源代码进行执行, 然后把执行之后的结果展示给用户. 所以我们能看到在上一节的内容中,我们拿到的是百度的源代码(就是那堆看不懂的鬼东西). 具体过程如图.</p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215173513873.png" alt="image-20201215173513873"></p><p>接下来就是一个比较重要的事情了. 所有的数据都在页面源代码里么? 非也~ 这里要介绍一个新的概念</p><p>那就是页面渲染数据的过程, 我们常见的页面渲染过程有两种, </p><ol><li><p>服务器渲染, 你需要的数据直接在页面源代码里能搜到</p><p>这个最容易理解, 也是最简单的. 含义呢就是我们在请求到服务器的时候, 服务器直接把数据全部写入到html中, 我们浏览器就能直接拿到带有数据的html内容. 比如, </p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215173905476.png" alt="image-20201215173905476"></p><p>由于数据是直接写在html中的, 所以我们能看到的数据都在页面源代码中能找的到的. </p><p>这种网页一般都相对比较容易就能抓取到页面内容. </p></li><li><p>前端JS渲染, 你需要的数据在页面源代码里搜不到</p><p>这种就稍显麻烦了. 这种机制一般是第一次请求服务器返回一堆HTML框架结构. 然后再次请求到真正保存数据的服务器, 由这个服务器返回数据, 最后在浏览器上对数据进行加载. 就像这样:</p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215174726729.png" alt="image-20201215174726729"></p><p>这样做的好处是服务器那边能缓解压力. 而且分工明确. 比较容易维护. 典型的有这么一个网页</p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215175207478.png" alt="image-20201215175207478"></p><p>那数据是何时加载进来的呢?  其实就是在我们进行页面向下滚动的时候, jd就在偷偷的加载数据了, 此时想要看到这个页面的加载全过程, 我们就需要借助浏览器的调试工具了(F12)</p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215175536447.png" alt="image-20201215175536447"></p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215175637599.png" alt="image-20201215175637599"></p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215175848471.png" alt="image-20201215175848471"></p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215180141450.png" alt="image-20201215180141450"></p><p>看到了吧, 页面上看到的内容其实是后加载进来的.</p></li></ol><p>OK, 在这里我不是要跟各位讲jd有多牛B, 也不是说这两种方式有什么不同, 只是想告诉各位, 有些时候, 我们的数据不一定都是直接来自于页面源代码.  如果你在页面源代码中找不到你要的数据时, 那很可能数据是存放在另一个请求里. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.你要的东西在页面源代码. 直接拿`源代码`提取数据即可</span><br><span class="line">2.你要的东西，不在页面源代码, 需要想办法找到真正的加载数据的那个请求. 然后提取数据</span><br></pre></td></tr></table></figure><h2 id="浏览器工具的使用-重点"><a href="#浏览器工具的使用-重点" class="headerlink" title="浏览器工具的使用(重点)"></a>浏览器工具的使用(重点)</h2><p>Chrome是一款非常优秀的浏览器. 不仅仅体现在用户使用上. 对于我们开发人员而言也是非常非常好用的. </p><p>对于一名爬虫工程师而言. 浏览器是最能直观的看到网页情况以及网页加载内容的地方. 我们可以按下F12来查看一些普通用户很少能使用到的工具. </p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20210519194028187.png" alt="image-20210519194028187"></p><p>其中, 最重要的Elements, Console, Sources, Network. </p><p>Elements是我们实时的网页内容情况, 注意, 很多兄弟尤其到了后期. 非常容易混淆Elements以及页面源代码之间的关系. </p><blockquote><p>注意,  </p><ol><li>页面源代码是执行js脚本以及用户操作之前的服务器返回给我们最原始的内容</li><li>Elements中看到的内容是js脚本以及用户操作之后的当时的页面显示效果.</li></ol></blockquote><p>你可以理解为, 一个是老师批改之前的卷子, 一个是老师批改之后的卷子. 虽然都是卷子. 但是内容是不一样的. 而我们目前能够拿到的都是页面源代码. 也就是老师批改之前的样子. 这一点要格外注意. </p><p>在Elements中我们可以使用左上角的小箭头.可以直观的看到浏览器中每一块位置对应的当前html状况. 还是很贴心的. </p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20210519194515866.png" alt="image-20210519194515866"></p><p>第二个窗口, Console是用来查看程序员留下的一些打印内容, 以及日志内容的. 我们可以在这里输入一些js代码自动执行. </p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20210519194811565.png" alt="image-20210519194811565"></p><p>等咱们后面讲解js逆向的时候会用到这里.</p><p>第三个窗口, Source, 这里能看到该网页打开时加载的所有内容. 包括页面源代码. 脚本. 样式, 图片等等全部内容. </p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20210519195035084.png" alt="image-20210519195035084"></p><p>第四个窗口, Network, 我们一般习惯称呼它为抓包工具. 在这里, 我们能看到当前网页加载的所有网路网络请求, 以及请求的详细内容. 这一点对我们爬虫来说至关重要. </p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20210519195221734.png" alt="image-20210519195221734"></p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20210519195336616.png" alt="image-20210519195336616"></p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20210519195502709.png" alt="image-20210519195502709"></p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20210519195613396.png" alt="image-20210519195613396"></p><p>其他更加具体的内容. 随着咱们学习的展开. 会逐一进行讲解. </p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>协议: 就是两个计算机之间为了能够流畅的进行沟通而设置的一个君子协定. 常见的协议有TCP&#x2F;IP. SOAP协议, HTTP协议, SMTP协议等等…..</p><p>HTTP协议, Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议. 直白点儿, 就是浏览器和服务器之间的数据交互遵守的就是HTTP协议. </p><p>HTTP协议把一条消息分为三大块内容. 无论是请求还是响应都是三块内容</p><p>请求: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求行 -&gt; 请求方式(get/post) 请求url地址 协议</span><br><span class="line">请求头 -&gt; 放一些服务器要使用的附加信息</span><br><span class="line"></span><br><span class="line">请求体 -&gt; 一般放一些请求参数</span><br></pre></td></tr></table></figure><p>响应:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">状态行 -&gt; 协议 状态码 </span><br><span class="line">响应头 -&gt; 放一些客户端要使用的一些附加信息</span><br><span class="line"></span><br><span class="line">响应体 -&gt; 服务器返回的真正客户端要用的内容(HTML,json)等</span><br></pre></td></tr></table></figure><p>在后面我们写爬虫的时候要格外注意请求头和响应头. 这两个地方一般都隐含着一些比较重要的内容</p><p>注意, 你的浏览器实际上把 HTTP的请求和响应的内容进行重组了. 显示成我们更容易阅读的效果. </p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215183825321.png" alt="请求头"></p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201215183908270.png" alt="响应头"></p><p>请求头中最常见的一些重要内容(爬虫需要):</p><ol><li>User-Agent : 请求载体的身份标识(用啥发送的请求)</li><li>Referer: 防盗链(这次请求是从哪个页面来的?  反爬会用到)</li><li>cookie: 本地字符串数据信息(用户登录信息, 反爬的token)</li></ol><p>响应头中一些重要的内容: </p><ol><li>cookie: 本地字符串数据信息(用户登录信息, 反爬的token)</li><li>各种神奇的莫名其妙的字符串(这个需要经验了, 一般都是token字样, 防止各种攻击和反爬)</li></ol><p>请求方式: </p><p>​GET:   显示提交</p><p>​POST:  隐示提交</p><h2 id="requests模块入门-重点"><a href="#requests模块入门-重点" class="headerlink" title="requests模块入门(重点)"></a>requests模块入门(重点)</h2><p>在前面小节中, 我们使用urllib来抓取页面源代码. 这个是python内置的一个模块. 但是, 它并不是我们常用的爬虫工具. 常用的抓取页面的模块通常使用一个第三方模块requests. 这个模块的优势就是比urllib还要简单, 并且处理各种请求都比较方便. </p><p>既然是第三方模块, 那就需要我们对该模块进行安装, 安装方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>如果安装速度慢的话可以改用国内的源进行下载安装. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple requests</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201216151606345.png" alt="image-20201216151606345"></p><p>OK. 接下来我们来看看requests能带给我们什么?</p><p>先拿sogou开刀试试. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例1. 抓取搜狗搜索内容</span></span><br><span class="line">kw = <span class="built_in">input</span>(<span class="string">&quot;请输入你要搜索的内容:&quot;</span>)</span><br><span class="line">response = requests.get(<span class="string">f&quot;https://www.sogou.com/web?query=<span class="subst">&#123;kw&#125;</span>&quot;</span>)  <span class="comment"># 发送get请求</span></span><br><span class="line"><span class="comment"># print(response.text)  # 直接拿结果(文本)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;sogou.html&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.text)</span><br></pre></td></tr></table></figure><p>接下来, 我们看一个稍微复杂那么一丢丢的, 百度翻译~</p><p><code>注意百度翻译这个url不好弄出来. 记住, 在输入的时候, 关掉各种输入法, 要用英文输入法, 然后不要回车. 就能看到这个sug了</code></p><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201216152849518.png" alt="image-20201216152849518"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例2.抓取百度翻译数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 准备参数</span></span><br><span class="line">kw = <span class="built_in">input</span>(<span class="string">&quot;请输入你要翻译的英语单词:&quot;</span>)</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;kw&quot;</span>: kw  <span class="comment"># 这里要和抓包工具里的参数一致.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 请注意百度翻译的sug这个url. 它是通过post方式进行提交的. 所以我们也要模拟post请求</span></span><br><span class="line">resp = requests.post(<span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span>, data=dic)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回值是json 那就可以直接解析成json</span></span><br><span class="line">resp_json = resp.json()</span><br><span class="line"><span class="comment"># &#123;&#x27;errno&#x27;: 0, &#x27;data&#x27;: [&#123;&#x27;k&#x27;: &#x27;Apple&#x27;, &#x27;v&#x27;: &#x27;n. 苹果公司，原称苹果电脑公司&#x27;....</span></span><br><span class="line"><span class="built_in">print</span>(resp_json[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;v&#x27;</span>])  <span class="comment"># 拿到返回字典中的内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/flechazo_star/images/raw/master/image-20201216154720522.png" alt="image-20201216154720522"></p><p>是不是很顺手呢?  还有一些网站在进行请求的时候会校验你的客户端设备型号. 比如, 我们抓取豆瓣电影</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例3: 抓取豆瓣电影</span></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;24&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,<span class="comment">#从库中的第几部电影去取</span></span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27;20&#x27;</span>,<span class="comment">#一次取出的个数</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url=url,params=param,headers=headers)</span><br><span class="line">list_data = response.json()</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;./douban.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">json.dump(list_data,fp=fp,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;over!!!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>下载一张图片有多容易?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://img2.doubanio.com/view/photo/s_ratio_poster/public/p2578474613.jpg&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line">file_name = url.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_name, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(resp.content)  <span class="comment"># resp.content得到的是bytes(字节)</span></span><br></pre></td></tr></table></figure><p>关于requests总结:</p><ol><li><code>requests.get()</code>  发送get请求,  请求参数可以直接放在<code>url</code>的<code>?</code>后面, 也可以放在字典里, 传递给<code>params</code>. </li><li><code>requests.post()</code> 发送post请求, 请求参数要放在<code>字典</code>里, 传递给<code>data</code></li><li><code>resp.text</code>  接收<code>文本</code>, 本质就是把<code>resp.content</code>进行<code>decode()</code>的结果.</li><li><code>resp.json()</code> 接收<code>resp.json()</code></li><li><code>resp.content</code> 接收<code>字节</code></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python基础</title>
      <link href="/2023/05/26/%E5%88%9D%E5%A7%8Bpython/"/>
      <url>/2023/05/26/%E5%88%9D%E5%A7%8Bpython/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="初识python"><a href="#初识python" class="headerlink" title="初识python"></a>初识python</h1><h2 id="python-简介"><a href="#python-简介" class="headerlink" title="python 简介"></a>python 简介</h2><h3 id="什么是编程-什么是编程语言"><a href="#什么是编程-什么是编程语言" class="headerlink" title="什么是编程, 什么是编程语言?"></a>什么是编程, 什么是编程语言?</h3><ul><li>编程: 用代码编写程序</li><li>编程语言: 用哪种语法规则来编写程序<br> a &#x3D; 10  &#x3D;&gt; 0101010(exe)</li></ul><h3 id="编程语言分类"><a href="#编程语言分类" class="headerlink" title="编程语言分类"></a>编程语言分类</h3><ul><li><p>编译型:  C, go<br>一次性把源代码进行翻译<br>特点: 执行效率很高, 平台依赖性一般比较高</p></li><li><p>解释型   javascript, python, ruby<br>逐行的对源代码进行翻译和运行<br>特点: 执行效率相对较低. 平台的依赖性不高</p></li></ul><h3 id="什么是python-优缺点"><a href="#什么是python-优缺点" class="headerlink" title="什么是python?  优缺点?"></a>什么是python?  优缺点?</h3><blockquote><p>python是一个叫龟叔的荷兰老头写的(89年)</p></blockquote><p>擅长:</p><ul><li><p>爬虫</p></li><li><p>自动化</p></li><li><p>科学计算</p></li><li><p>人工智能</p></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量: 可以发生改变的一个量. 变量是用来区分不同数据的. 可以指向一个内存空间, 帮我们存储一些数据</p><p>变量的命名规范:</p><ul><li>必须是数字或字母或下换线组成.</li><li>不能是数字开头, 更不能是纯数字</li><li>不能用python的关键字</li><li>不要用中文</li><li>不要太长</li><li>要有意义</li><li>推荐使用下换线命名或者驼峰命名</li></ul><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li>print(123)</li><li>可以把所有的变量的字母变成大写就可以认为是常量<br>不存在绝对意义上的常量</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型-区分不同的数据-不同的数据类型应该有不同的操作"><a href="#数据类型-区分不同的数据-不同的数据类型应该有不同的操作" class="headerlink" title="数据类型: 区分不同的数据. 不同的数据类型应该有不同的操作"></a>数据类型: 区分不同的数据. 不同的数据类型应该有不同的操作</h3><ul><li><p>数字: +-*&#x2F;</p></li><li><p>整数, int</p></li><li><p>小数, float</p></li><li><p>文字: 展示</p><ul><li><p>字符串: str (*****)</p></li><li><p>表示方式:<br>    ‘’<br>    “”<br>    ‘’’ ‘’’<br>    “”” “””</p></li></ul></li></ul><blockquote><p>操作:<br>        +  左右两端必须是字符串, 表示字符串连接操作<br>        *  一个字符串只能乘以一个数字, 表示字符串重复的次数</p></blockquote><ul><li>布尔(bool): 条件判断<ul><li>布尔值主要有两个:<ul><li>True  真, 真命题</li><li>False 假, 假命题<br>100 &gt; 30  -&gt; 真</li></ul></li></ul></li></ul><h2 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h2><blockquote><p>变量 &#x3D; input(提示语)</p></blockquote><ul><li>首先会在屏幕中显示出提示语, 用户输入内容. 然后把用户输入的内容交给前面的变量</li></ul><p style="color:red">坑: input()得到的结果一定是字符串</p><ul><li>怎么把字符串转化成数字类型<br>py基础数据类型:<br>想把xxx转化成谁, 就用谁套起来<br>str &#x3D;&gt; int   int(str)</li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p>if语句的语法规则:</p><ul><li><pre><code>    ```    if 条件:          代码          如果条件成立就执行代码          如果不成立, 就不执行    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">-        ```</span><br><span class="line">         if 条件:</span><br><span class="line">               代码1</span><br><span class="line">         else:</span><br><span class="line">               代码2</span><br><span class="line">          如果条件成立, 执行代码1, 否则, 执行代码2</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code>   if语句可以互相嵌套   if 条件:       if.....:           ss       else:           xx   else:       代码2   </code></pre></li><li>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if 条件1:</span><br><span class="line">   代码1</span><br><span class="line">elif 条件2:</span><br><span class="line">   代码2</span><br><span class="line">elif 条件3:</span><br><span class="line">    代码3</span><br><span class="line">....</span><br><span class="line">else:</span><br><span class="line">    xxxx</span><br></pre></td></tr></table></figure></li></ul><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>可以让我们的代码重复的去执行</p><ul><li><p>while循环:</p><p>  while 条件:<br>  代码<br>  过程: 判断条件是否为真, 如果真, 执行代码. 然后再次判断条件. 直到条件为假循环结束</p></li></ul><p>break: 让当前这个循环立即停止<br>continue: 停止当前本次循环. 继续执行下一次循环</p><ul><li><p>for循环:</p><pre><code>for 变量 in 可迭代的东西:    代码把可迭代的东西中的每一项内容拿出来. 挨个的赋值给变量. 每一次赋值都要执行一次循环体(代码)</code></pre><p>字符串是可迭代的</p><p>for循环想要计数. 必须借助于range</p><p>range(n): 从0数到n. 不包含n<br>range(m, n): 从m数到n, 不包含n<br>range(m, n, s): 从m数到n, 不包含n, 每次的间隔是s</p><p>平时用的多的是for循环, while循环用的多的是死循环</p></li></ul><blockquote><p>ps:     pass: 代码占位</p></blockquote><h1 id="python基础数据类型"><a href="#python基础数据类型" class="headerlink" title="python基础数据类型"></a>python基础数据类型</h1><h2 id="操作数据类型"><a href="#操作数据类型" class="headerlink" title="操作数据类型"></a>操作数据类型</h2><p>int, float, bool<br>str   ()<br>list  ()<br>tuple ()<br>set   ()<br>dict  ()<br>bytes ()<br>运算符 ()<br>文件操作()</p><h2 id="int-float-bool"><a href="#int-float-bool" class="headerlink" title="int,float,bool"></a>int,float,bool</h2><ul><li><p>int: 整数, 加减乘除, 大小比较<br>a &#x3D; 10</p></li><li><p>float: 小数, 浮点数<br>a &#x3D; 10.5<br>print(a)<br>print(10&#x2F;3)  # 小数: 数据范围是无限的. 整数: 在某一个特定的区间内是可以表示的很清楚的.<br>1~100000000</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0~1</span><br><span class="line">计算机是一个二进制的产品: 0, 1</span><br><span class="line">计算机表示一个小数是会有误差的.</span><br><span class="line">bool : 用来做条件判断的</span><br><span class="line">      取值范围: True, False</span><br><span class="line">基础数据类型之间的转化</span><br><span class="line">  a = &quot;10&quot;  # 字符串</span><br><span class="line">  print(type(a))</span><br><span class="line">  b = int(a)  # 把字符串转化成int()</span><br><span class="line">  print(type(b))</span><br><span class="line">  a = 0 # 在python中, 所有的非零的数字都是 True, 零是False</span><br><span class="line">  b = bool(a)</span><br><span class="line">  print(type(b))</span><br><span class="line">  print(b)</span><br><span class="line"></span><br><span class="line">while 1:  # 死循环, 恒为真</span><br><span class="line">    print(&quot;还我钱&quot;)</span><br><span class="line"></span><br><span class="line">s = &quot;&quot;   # 在python中, 所有的非空字符串都是True, 空字符串是False</span><br><span class="line">print(bool(s))</span><br></pre></td></tr></table></figure><blockquote><p>综上, 在python的基本数据类型中, 表示空的东西都是False, 不空的东西都是True</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lst = []</span><br><span class="line">print(bool(lst))</span><br><span class="line"></span><br><span class="line">while 1:</span><br><span class="line">    content = input(&quot;请输入你要喷的内容:&quot;)</span><br><span class="line">    if content:</span><br><span class="line">        print(&quot;你要发给打野的内容:&quot;, content)</span><br><span class="line">    else:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 字符串的格式化问题</span><br><span class="line">我叫xxx, 我住在xxxx, 我今年xx岁, 我喜欢做xxxxx</span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字:&quot;</span>)</span><br><span class="line">address = <span class="built_in">input</span>(<span class="string">&quot;请输入你的住址:&quot;</span>)</span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄:&quot;</span>))</span><br><span class="line">hobby = <span class="built_in">input</span>(<span class="string">&quot;请输入你的爱好:&quot;</span>)</span><br><span class="line"></span><br><span class="line">- %s 字符串占位</span><br><span class="line">- %d 占位整数</span><br><span class="line">- %f 占位小数</span><br><span class="line">s = <span class="string">&quot;我叫%s, 我住在%s, 我今年%d岁, 我喜欢%s&quot;</span> % (name, address, age, hobby)</span><br><span class="line">s0 = <span class="string">&quot;我叫%s&quot;</span> % name</span><br><span class="line"><span class="built_in">print</span>(s0)</span><br><span class="line">s1 = <span class="string">&quot;我叫&#123;&#125;, 我住在&#123;&#125;, 我今年&#123;&#125;岁, 我喜欢&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, address, age, hobby)</span><br><span class="line">s2 = <span class="string">f&quot;我叫<span class="subst">&#123;name&#125;</span>,我叫<span class="subst">&#123;name&#125;</span>,我叫<span class="subst">&#123;name&#125;</span>,我叫<span class="subst">&#123;name&#125;</span>,我今年<span class="subst">&#123;age&#125;</span>岁,我叫<span class="subst">&#123;name&#125;</span>,我叫<span class="subst">&#123;name&#125;</span>&quot;</span>  <span class="comment"># f-string</span></span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> 索引和切片</span><br><span class="line">索引: 按照位置提取元素</span><br><span class="line">s = <span class="string">&quot;我叫周杰伦&quot;</span></span><br><span class="line">可以采用索引的方式来提取某一个字符(文字)</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>])  <span class="comment"># 程序员都是从0开始数数</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>])  <span class="comment"># -表示倒数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">切片: 从一个字符串中提取一部分内容</span><br><span class="line">s = <span class="string">&quot;我叫周杰伦,你呢? 你叫周润发吗?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">3</span>:<span class="number">6</span>])  <span class="comment"># 从索引3位置进行切片, 切到6结束, 坑: 切片拿不到第二个位置的元素</span></span><br><span class="line">语法: s[start:end] 从start到end进行切片. 但是取不到end [start, end)</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(s[:<span class="number">5</span>])  <span class="comment"># 如果start是从开头进行切片, 可以省略</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">6</span>:])  <span class="comment"># 从start开始一直截取到末尾</span></span><br><span class="line">: 如果左右两端有空白. 表示开头或者结尾</span><br><span class="line"><span class="built_in">print</span>(s[:])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">3</span>:-<span class="number">1</span>])  <span class="comment"># 目前还是只能从左往右切片</span></span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>:-<span class="number">3</span>])  <span class="comment"># 没结果, 这里是坑!!!!</span></span><br><span class="line">                                           </span><br><span class="line">s = <span class="string">&quot;我爱你&quot;</span></span><br><span class="line">可以给切片添加步长来控制切片的方向</span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>])  <span class="comment"># -表示从右往左</span></span><br><span class="line">语法: s[start:end:step] 从start切到end, 每step个元素出来一个元素</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;abcdefghijklmnopqrst&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>:<span class="number">11</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(s[-<span class="number">1</span>:-<span class="number">10</span>:-<span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">3.</span>字符串常规操作</span><br><span class="line">字符串的操作一般不会对原字符串产生影响. 一般是返回一个新的字符串</span><br><span class="line">===============================================</span><br><span class="line"><span class="number">3.1</span> 字符串大小写转换</span><br><span class="line">    s = <span class="string">&quot;python&quot;</span></span><br><span class="line">    s1 = s.capitalize()</span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">    s = <span class="string">&quot;I have a dream!&quot;</span></span><br><span class="line">    s1 = s.title()  <span class="comment"># 单词的首字母大写</span></span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">    s = <span class="string">&quot;I HAVE A DREAM&quot;</span></span><br><span class="line">    s1 = s.lower()  <span class="comment"># 变成小写字母</span></span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">    s = <span class="string">&quot;i have a dream&quot;</span></span><br><span class="line">    s1 = s.upper()  <span class="comment"># 把所有字母变成大写字母</span></span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如何忽略大小写来进行判断  =&gt;  upper()</span></span><br><span class="line">    verify_code = <span class="string">&quot;xAd1&quot;</span></span><br><span class="line">    user_input = <span class="built_in">input</span>(<span class="string">f&quot;请输入验证码(<span class="subst">&#123;verify_code&#125;</span>): &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> verify_code.upper() == user_input.upper():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;验证码正确&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;验证码不正确&quot;</span>)</span><br><span class="line">===============================================</span><br><span class="line"><span class="number">3.2</span> 替换和切割(*)</span><br><span class="line">    strip()  去掉字符串左右两端的空白符(空格, \t, \n)</span><br><span class="line">    s = <span class="string">&quot;    你好,   我叫  周杰伦    &quot;</span></span><br><span class="line">    s1 = s.strip()</span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 案例</span></span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名:&quot;</span>).strip()</span><br><span class="line">    password = <span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> password == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录失败!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登录失败!&quot;</span>)</span><br><span class="line">===============================================</span><br><span class="line"><span class="number">3.3</span> replace(old, new) 字符串替换</span><br><span class="line">    s = <span class="string">&quot;你好啊, 我叫赛利亚&quot;</span></span><br><span class="line">    s1 = s.replace(<span class="string">&quot;赛利亚&quot;</span>, <span class="string">&quot;周杰伦&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">    a = <span class="string">&quot;hello i am a good man!&quot;</span></span><br><span class="line">    a1 = a.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)  <span class="comment"># 去掉所有的空格</span></span><br><span class="line">    <span class="built_in">print</span>(a1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    split(用什么切割) 字符串切割, 用什么切, 就会损失掉谁.</span><br><span class="line">    a = <span class="string">&quot;python_java_c_c#_javascript&quot;</span></span><br><span class="line">    lst = a.split(<span class="string">&quot;_&quot;</span>)  <span class="comment"># 切割之后的结果会放在列表当中</span></span><br><span class="line">    <span class="built_in">print</span>(lst)</span><br><span class="line">    lst = a.split(<span class="string">&quot;_java_&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">    replace(), split(), strip()   =&gt; 记住</span><br><span class="line">===============================================    </span><br><span class="line"><span class="number">3.4</span> 查找和判断</span><br><span class="line">- 查找</span><br><span class="line">    s = <span class="string">&quot;你好啊. 我叫周润发&quot;</span></span><br><span class="line">    ret = s.find(<span class="string">&quot;周润发12312&quot;</span>)  <span class="comment"># 返回如果是-1就是没有该字符串出现</span></span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line">    ret = s.index(<span class="string">&quot;周润发12312&quot;</span>)  <span class="comment"># 如果报错就是没有</span></span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;周润发&quot;</span> <span class="keyword">in</span> s)  <span class="comment"># in可以做条件上的判断</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;周润发&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> s)  <span class="comment"># not in 判断是否不存在</span></span><br><span class="line"></span><br><span class="line">- 判断</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字:&quot;</span>)</span><br><span class="line">    <span class="comment"># 判断你是不是姓张</span></span><br><span class="line">    <span class="keyword">if</span> name.startswith(<span class="string">&quot;张&quot;</span>):  <span class="comment"># 判断字符串是否以xxxxx开头, endswith()</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你姓张&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;不姓张&quot;</span>)</span><br><span class="line"></span><br><span class="line">    money = <span class="built_in">input</span>(<span class="string">&quot;请输入你都里的钱:&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> money.isdigit():  <span class="comment"># 判断字符串是否由整数组成.</span></span><br><span class="line">        money = <span class="built_in">int</span>(money)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;可以花钱了&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;对不起,您输入有误....&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">startswith(), isdigit(), <span class="keyword">in</span>, <span class="keyword">not</span> <span class="keyword">in</span>, find</span><br><span class="line">===============================================</span><br><span class="line"><span class="number">3.5</span> 补充和总结</span><br><span class="line">    s = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(s))  <span class="comment"># length  长度</span></span><br><span class="line"></span><br><span class="line">    join()</span><br><span class="line">    s = <span class="string">&quot;python_java_c_javascript&quot;</span></span><br><span class="line">    lst = s.split(<span class="string">&quot;_&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">    lst = [<span class="string">&#x27;赵本山&#x27;</span>, <span class="string">&#x27;王大拿&#x27;</span>, <span class="string">&#x27;大张伟&#x27;</span>, <span class="string">&#x27;马大哈&#x27;</span>]</span><br><span class="line">    <span class="comment"># 用_把上面的人的名字连起来</span></span><br><span class="line">    s = <span class="string">&quot;_&quot;</span>.join(lst)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">===============================================</span><br><span class="line">总结:</span><br><span class="line"><span class="number">1.</span> <span class="string">f&quot;<span class="subst">&#123;变量&#125;</span>&quot;</span>  格式化一个字符串</span><br><span class="line"><span class="number">2.</span> 索引和切片:</span><br><span class="line">    索引: 从<span class="number">0</span>开始的. []</span><br><span class="line">    切片: s[start: end: step], end位置的数据永远拿不到</span><br><span class="line"><span class="number">3.</span> 相关操作:</span><br><span class="line">    字符串操作对原字符串是不发生改变的.</span><br><span class="line">    <span class="number">1.</span> upper() 在需要忽略大小写的时候</span><br><span class="line">    <span class="number">2.</span> strip() 可以去掉字符串左右两端的空白(空格, \t, \n)</span><br><span class="line">    <span class="number">3.</span> replace() 字符串替换</span><br><span class="line">    <span class="number">4.</span> split()  对字符串进行切割</span><br><span class="line">    <span class="number">5.</span> join()  拼接一个列表中的内容成为新字符串</span><br><span class="line">    <span class="number">6.</span> startswith() 判断字符串是否以xxx开头</span><br><span class="line">    <span class="number">7.</span> <span class="built_in">len</span>() 字符串长度(内置函数)</span><br><span class="line"></span><br><span class="line">    字符串的循环和遍历</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">        <span class="built_in">print</span>(c)   字符串中的每一个字符</span><br><span class="line"></span><br><span class="line">    关于<span class="keyword">in</span>:</span><br><span class="line">        <span class="number">1.</span> 判断xxx是否在xxxx中出现了</span><br><span class="line">        <span class="number">2.</span> <span class="keyword">for</span>循环</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.1</span> 定义: 能装东西的东西</span><br><span class="line">在python中用[]来表示一个列表. 列表中的元素通过,隔开</span><br><span class="line">a = [<span class="string">&quot;张三丰&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;张绍刚&quot;</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="literal">True</span>, ]]</span><br><span class="line">特性:</span><br><span class="line">  <span class="number">1.</span> 也像字符串一样也有索引和切片</span><br><span class="line">  <span class="number">2.</span> 索引如果超过范围会报错</span><br><span class="line">  <span class="number">3.</span> 可以用<span class="keyword">for</span>循环进行遍历</span><br><span class="line">  <span class="number">4.</span> 用<span class="built_in">len</span>可以拿到列表的长度</span><br><span class="line">lst = [<span class="string">&quot;金毛狮王&quot;</span>, <span class="string">&quot;张绍刚&quot;</span>, <span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;郭麒麟&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(lst[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">3652</span>])   <span class="comment"># list index out of range</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(lst))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">===================================================</span><br><span class="line"><span class="number">4.2</span> 列表的增删改查(*)</span><br><span class="line">lst = []</span><br><span class="line"><span class="comment"># 向列表中添加内容</span></span><br><span class="line"><span class="comment"># append() 追加(*)</span></span><br><span class="line">lst.append(<span class="string">&quot;张绍刚&quot;</span>)</span><br><span class="line">lst.append(<span class="string">&quot;赵本山&quot;</span>)</span><br><span class="line">lst.append(<span class="string">&quot;张无忌&quot;</span>)</span><br><span class="line"><span class="comment"># insert() 插入</span></span><br><span class="line">lst.insert(<span class="number">0</span>, <span class="string">&quot;赵敏&quot;</span>)</span><br><span class="line"><span class="comment"># extend() 可以合并两个列表, 批量的添加</span></span><br><span class="line">lst.extend([<span class="string">&#x27;武则天&#x27;</span>, <span class="string">&quot;嬴政&quot;</span>, <span class="string">&quot;马超&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">ret = lst.pop(<span class="number">3</span>)  <span class="comment"># 给出被删除的索引. 返回被删除的元素</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line">lst.remove(<span class="string">&quot;马超&quot;</span>)  <span class="comment"># 删除某个元素(*)</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">lst[<span class="number">4</span>] = <span class="string">&quot;恺&quot;</span>  <span class="comment"># 直接用索引就可以进行修改操作</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">3</span>])  <span class="comment"># 直接用索引进行查询操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小练习(*):</span></span><br><span class="line"><span class="comment">#   把所有的姓张的人修改成姓王</span></span><br><span class="line">lst = [<span class="string">&#x27;赵敏&#x27;</span>, <span class="string">&#x27;张绍刚&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="string">&#x27;武则天&#x27;</span>, <span class="string">&#x27;嬴政&#x27;</span>, <span class="string">&#x27;马超&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># lst[1] = &quot;王绍刚&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for item in lst:  # 此时, 我们看不到元素的索引位置</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst)):  <span class="comment"># len(lst)列表的长度 -&gt;  可以直接拿到列表索引的for循环</span></span><br><span class="line">    item = lst[i]  <span class="comment"># item依然是列表中的每一项</span></span><br><span class="line">    <span class="keyword">if</span> item.startswith(<span class="string">&quot;张&quot;</span>):</span><br><span class="line">        <span class="comment"># 张绍刚</span></span><br><span class="line">        new_name = <span class="string">&quot;王&quot;</span>+item[<span class="number">1</span>:]</span><br><span class="line">        <span class="built_in">print</span>(new_name)</span><br><span class="line">        <span class="comment"># 把新名字丢回列表(需要索引了?)</span></span><br><span class="line">        lst[i] = new_name  <span class="comment"># 修改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">===================================================</span><br><span class="line"><span class="number">4.3</span> 列表的其他操作(补充)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;麻花藤&quot;</span>, <span class="string">&quot;武大郎&quot;</span>]  <span class="comment"># 列表会按照你存放的顺序来保存</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">222</span>, <span class="number">444</span>, <span class="number">123</span>, <span class="number">43</span>, <span class="number">123</span>,<span class="number">43243</span>, <span class="number">111</span>]</span><br><span class="line">lst.sort()  <span class="comment"># 对列表进行升序排序</span></span><br><span class="line">lst.sort(reverse=<span class="literal">True</span>)   <span class="comment"># reverse: 翻转</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的嵌套</span></span><br><span class="line">lst = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>, [<span class="string">&quot;呵呵哒&quot;</span>, <span class="string">&quot;妈妈呀&quot;</span>, <span class="string">&quot;苦苦脊瓦&quot;</span>, [<span class="string">&quot;可乐&quot;</span>, <span class="string">&quot;scrapy&quot;</span>, <span class="number">123</span>]], <span class="string">&#x27;aed&#x27;</span>, <span class="string">&quot;qpr&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(lst[<span class="number">2</span>][<span class="number">3</span>][<span class="number">1</span>])</span><br><span class="line">lst[<span class="number">2</span>][<span class="number">3</span>][<span class="number">1</span>] = lst[<span class="number">2</span>][<span class="number">3</span>][<span class="number">1</span>].upper()</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的循环删除(*)</span></span><br><span class="line">lst = [<span class="string">&#x27;赵敏&#x27;</span>, <span class="string">&#x27;张绍刚&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="string">&#x27;武则天&#x27;</span>, <span class="string">&#x27;嬴政&#x27;</span>, <span class="string">&#x27;马超&#x27;</span>]</span><br><span class="line"></span><br><span class="line">temp = []  <span class="comment"># 准备一个临时列表, 负责存储要删除的内容</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="keyword">if</span> item.startswith(<span class="string">&quot;张&quot;</span>):</span><br><span class="line">        temp.append(item)  <span class="comment"># 把要删除的内容记录下来</span></span><br><span class="line">        <span class="comment"># lst.remove(item)  # 有bug</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> temp:</span><br><span class="line">    lst.remove(item)  <span class="comment"># 去原列表中进行删除操作</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安全稳妥的循环删除方式:</span></span><br><span class="line"><span class="comment">#    将要删除的内容保存在一个新列表中. 循环新列表. 删除老列表</span></span><br></pre></td></tr></table></figure><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> 元组, 特点: 不可变的列表</span><br><span class="line">t = (<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>, <span class="string">&quot;呵呵哒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(t[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line">t[<span class="number">0</span>] = <span class="string">&quot;樵夫&quot;</span>  <span class="comment"># &#x27;tuple&#x27; object does not support item assignment</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment">#你固定了某些数据. 不允许外界修改</span></span><br><span class="line"><span class="comment">#元组如果只有1个元素(*), 需要在元素的末尾添加一个逗号</span></span><br><span class="line"></span><br><span class="line">t = (<span class="string">&quot;哈哈&quot;</span>,)  <span class="comment"># ()默认是优先级</span></span><br><span class="line"><span class="comment"># print( (1+3) * 6)</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于元组的不可变(坑), 内存地址不能变.</span></span><br><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="string">&quot;呵呵哒&quot;</span>, <span class="string">&quot;么么哒&quot;</span>])  <span class="comment"># (张三, 李四, 王二麻子)</span></span><br><span class="line">t[<span class="number">3</span>].append(<span class="string">&quot;哒哒哒&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>集合, <span class="built_in">set</span>集合是无序的</span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="string">&quot;呵呵哒&quot;</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(s))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;呵呵&quot;</span>, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), []&#125;  <span class="comment"># unhashable type: &#x27;list&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">不可哈希: python中的<span class="built_in">set</span>集合进行数据存储的时候. 需要对数据进行哈希计算:根据计算出来的哈希值进行存储数据</span><br><span class="line">         <span class="built_in">set</span>集合要求存储的数据必须是可以进行哈希计算的.</span><br><span class="line">         可变的数据类型, <span class="built_in">list</span>, <span class="built_in">dict</span>, <span class="built_in">set</span></span><br><span class="line">可哈希: 不可变的数据类型, <span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">tuple</span>, <span class="built_in">bool</span>.</span><br><span class="line">s = <span class="built_in">set</span>()  <span class="comment"># 创建空集合</span></span><br><span class="line"></span><br><span class="line">s.add(<span class="string">&quot;赵本山&quot;</span>)</span><br><span class="line">s.add(<span class="string">&quot;范伟&quot;</span>)</span><br><span class="line">s.add(<span class="string">&quot;麻花藤&quot;</span>)</span><br><span class="line"></span><br><span class="line">s.pop()  <span class="comment"># 由于集合无序. 测试的时候没法验证是最后一个.</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">s.remove(<span class="string">&quot;范伟&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想要修改. 先删除. 再新增</span></span><br><span class="line">s.remove(<span class="string">&quot;麻花藤&quot;</span>)</span><br><span class="line">s.add(<span class="string">&quot;沈腾&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 交集, 并集, 差集</span></span><br><span class="line">s1 = &#123;<span class="string">&quot;刘能&quot;</span>, <span class="string">&quot;赵四&quot;</span>, <span class="string">&quot;皮长山&quot;</span>&#125;</span><br><span class="line">s2 = &#123;<span class="string">&quot;刘科长&quot;</span>, <span class="string">&quot;冯乡长&quot;</span>, <span class="string">&quot;皮长山&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1 &amp; s2)  <span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">print</span>(s1.intersection(s2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1 | s2)  <span class="comment"># 并集</span></span><br><span class="line"><span class="built_in">print</span>(s1.union(s2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1 - s2)  <span class="comment"># 差集</span></span><br><span class="line"><span class="built_in">print</span>(s1.difference(s2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">重要的作用: 可以去除重复</span><br><span class="line">s1 = &#123;<span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;昆凌&quot;</span>, <span class="string">&quot;蔡依林&quot;</span>, <span class="string">&quot;侯佩岑&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line">s1.add(<span class="string">&quot;周杰伦&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line">lst = [<span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;昆凌&quot;</span>, <span class="string">&quot;蔡依林&quot;</span>, <span class="string">&quot;侯佩岑&quot;</span>, <span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;昆凌&quot;</span>, <span class="string">&quot;蔡依林&quot;</span>, <span class="string">&quot;侯佩岑&quot;</span>, <span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;昆凌&quot;</span>, <span class="string">&quot;蔡依林&quot;</span>, <span class="string">&quot;侯佩岑&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(lst)))   <span class="comment"># 去除重复之后的数据是无序的.</span></span><br></pre></td></tr></table></figure><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>首先, 字典是以键值对的形式进行存储数据的<br>字典的表示方式: {key:value, key2:value, key3:value}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7.1</span> 构造字典</span><br><span class="line">dic = &#123;<span class="string">&quot;jay&quot;</span>: <span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;金毛狮王&quot;</span>: <span class="string">&quot;谢逊&quot;</span>&#125;</span><br><span class="line">val = dic[<span class="string">&quot;金毛狮王&quot;</span>]  <span class="comment"># 用起来只是把索引换成了key</span></span><br><span class="line"><span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典的key必须是可哈希的数据类(不可变)</span></span><br><span class="line"><span class="comment">#字典的value可以是任何数据类型</span></span><br><span class="line">dic = &#123;[]:<span class="number">123</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="string">&quot;汪峰的孩子&quot;</span>: [<span class="string">&quot;孩子1&quot;</span>, <span class="string">&quot;孩子2&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">===================================================</span><br><span class="line"><span class="number">7.2</span> 字典的增删改查</span><br><span class="line"></span><br><span class="line">dic = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">dic[<span class="string">&#x27;jay&#x27;</span>] = <span class="string">&quot;周杰伦&quot;</span></span><br><span class="line">dic[<span class="number">1</span>] = <span class="number">123</span></span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"></span><br><span class="line">dic[<span class="string">&#x27;jay&#x27;</span>] = <span class="string">&quot;昆凌&quot;</span>  <span class="comment"># 此时, 字典中已经有了jay. 此时执行的就是修改操作了</span></span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"></span><br><span class="line">dic.setdefault(<span class="string">&quot;jay&quot;</span>, <span class="string">&quot;胡辣汤&quot;</span>)  <span class="comment"># 设置默认值. 如果以前已经有了tom了. setdefault就不起作用了</span></span><br><span class="line"><span class="comment"># print(dic)</span></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">dic.pop(<span class="string">&quot;jay&quot;</span>)  <span class="comment"># 根据key去删除</span></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询</span></span><br><span class="line"><span class="built_in">print</span>(dic[<span class="string">&#x27;jay10010&#x27;</span>])  <span class="comment"># 如果key不存在. 程序会报错. 当你确定你的key是没问题的, 可以用</span></span><br><span class="line"><span class="built_in">print</span>(dic.get(<span class="string">&#x27;jay10086&#x27;</span>))  <span class="comment"># 如果key不存在. 程序返回None. 当不确定你的key的时候. 可以用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line">a = <span class="literal">None</span>  <span class="comment"># 单纯的就是空, 表示没有的意思</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子:</span></span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;赵四&quot;</span>: <span class="string">&quot;特别能歪嘴&quot;</span>,</span><br><span class="line">    <span class="string">&quot;刘能&quot;</span>: <span class="string">&quot;老, 老四啊...&quot;</span>,</span><br><span class="line">    <span class="string">&quot;大脚&quot;</span>: <span class="string">&quot;跟这个和那个搞对象&quot;</span>,</span><br><span class="line">    <span class="string">&quot;大脑袋&quot;</span>: <span class="string">&quot;瞎折腾....&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入你想知道的我们村的人的名字: &quot;</span>)</span><br><span class="line">val = dic.get(name)</span><br><span class="line"><span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我门村没这个人~~~&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line">===================================================</span><br><span class="line"><span class="number">7.3</span> 字典进阶操作 -- 循环和嵌套</span><br><span class="line"></span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;赵四&quot;</span>: <span class="string">&quot;特别能歪嘴&quot;</span>,</span><br><span class="line">    <span class="string">&quot;刘能&quot;</span>: <span class="string">&quot;老, 老四啊...&quot;</span>,</span><br><span class="line">    <span class="string">&quot;大脚&quot;</span>: <span class="string">&quot;跟这个和那个搞对象&quot;</span>,</span><br><span class="line">    <span class="string">&quot;大脑袋&quot;</span>: <span class="string">&quot;瞎折腾....&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 可以用<span class="keyword">for</span>循环, 直接拿到key</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="built_in">print</span>(key, dic[key])</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 希望把所有的key全都保存在一个列表中</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dic.keys()))  <span class="comment"># 拿到所有的key了</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 希望吧所有的value都放在一个列表中</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dic.values()))</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 直接拿到字典中的key和value</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dic.items()))</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> dic.items():  <span class="comment"># 可以直接拿到字典的所有的key和value</span></span><br><span class="line">    <span class="comment"># print(item)  # 确定, item中只有两项元素</span></span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line"></span><br><span class="line">a, b = (<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 元组或者列表都可以执行该操作. 该操作被称为解构(解包)</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># 字典的嵌套</span></span><br><span class="line">wangfeng = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;汪峰&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="string">&quot;wife&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;章子怡&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hobby&quot;</span>: <span class="string">&quot;演戏&quot;</span>,</span><br><span class="line">        <span class="string">&quot;assistant&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;樵夫&quot;</span>,</span><br><span class="line">            <span class="string">&quot;age&quot;</span>: <span class="number">19</span>,</span><br><span class="line">            <span class="string">&quot;hobby&quot;</span>: <span class="string">&quot;打游戏&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;孩儿1&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">13</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;孩儿2&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;孩儿3&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">8</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 汪峰妻子的助手的名字</span></span><br><span class="line">name = wangfeng[<span class="string">&#x27;wife&#x27;</span>][<span class="string">&#x27;assistant&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给汪峰的第二个孩子加1岁</span></span><br><span class="line">wangfeng[<span class="string">&#x27;children&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;age&#x27;</span>] = wangfeng[<span class="string">&#x27;children&#x27;</span>][<span class="number">1</span>][<span class="string">&#x27;age&#x27;</span>] + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(wangfeng)</span><br><span class="line"></span><br><span class="line">===================================================</span><br><span class="line"><span class="number">7.4</span> 补充. 关于字典的循环删除</span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;赵四&quot;</span>: <span class="string">&quot;特别能歪嘴&quot;</span>,</span><br><span class="line">    <span class="string">&quot;刘能&quot;</span>: <span class="string">&quot;老, 老四啊...&quot;</span>,</span><br><span class="line">    <span class="string">&quot;大脚&quot;</span>: <span class="string">&quot;跟这个和那个搞对象&quot;</span>,</span><br><span class="line">    <span class="string">&quot;大脑袋&quot;</span>: <span class="string">&quot;瞎折腾....&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">temp = []  <span class="comment"># 存放即将要删除的key</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    <span class="keyword">if</span> key.startswith(<span class="string">&quot;大&quot;</span>):</span><br><span class="line">        temp.append(key)</span><br><span class="line">        <span class="comment"># dic.pop(key)  # dictionary changed size during iteration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> temp:  <span class="comment"># 循环列表, 删除字典中的内容</span></span><br><span class="line">    dic.pop(t)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dic)</span><br></pre></td></tr></table></figure><h2 id="byte"><a href="#byte" class="headerlink" title="byte"></a>byte</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">1. 字符集和编码</span><br><span class="line">0 1  &lt;=&gt; 1010101010 =&gt; 二进制转化成十进制 &lt;=&gt; 88</span><br><span class="line">电脑如何进行存储文字信息</span><br><span class="line">1000000  &lt;=&gt; a</span><br><span class="line"></span><br><span class="line">ascii =&gt; 编排了128个文字符号. 只需要7个0和1就可以表示了. 01111111  =&gt; 1 byte =&gt; 8bit</span><br><span class="line"></span><br><span class="line">ANSI =&gt; 一套标准, 每个字符 16bit, 2byte  =&gt; 65536</span><br><span class="line">00000000 01111111</span><br><span class="line"></span><br><span class="line">到了中国, gb2312编码, gbk编码(windows 默认的就是这个)</span><br><span class="line">01000000 01010101  =&gt;  中</span><br><span class="line">到了日本, JIS编码</span><br><span class="line">01000000 01010101  =&gt;  え</span><br><span class="line"></span><br><span class="line">Unicode: 万国码.  中文</span><br><span class="line">早期Unicode没有意识到这个问题. UCS-2 2个字节.</span><br><span class="line">进行了扩充, UCS-4 4个字节</span><br><span class="line">00000000 00000000 00000000 01111111</span><br><span class="line"></span><br><span class="line">utf: 是可变长度的unicode. 可以进行数据的传输和存储 -&gt; 行书, 草书, 隶书</span><br><span class="line">utf-8:   最短的字节长度8</span><br><span class="line">    英文: 8bit, 1byte</span><br><span class="line">    欧洲文字: 16bit, 2byte</span><br><span class="line">    中文: 24bit, 3byte</span><br><span class="line"></span><br><span class="line">utf-16:  最短的字节长度16</span><br><span class="line"></span><br><span class="line">总结:</span><br><span class="line">    1. ascii: 8bit, 1byte</span><br><span class="line">    2. gbk: 16bit,  2byte  windows默认</span><br><span class="line">    3. unicode: 32bit, 4byte(没法用, 只是一个标准)</span><br><span class="line">    4. utf-8:       mac默认</span><br><span class="line">        英文: 8bit, 1byte</span><br><span class="line">        欧洲: 16bit, 2byte</span><br><span class="line">        中文: 24bit, 3byte</span><br><span class="line"></span><br><span class="line">    gbk和utf-8不能直接就进行转化.</span><br><span class="line">    我军密码本  -&gt; 文字 -&gt; 敌军密码本</span><br><span class="line">2. bytes</span><br><span class="line">    程序员平时遇见的所有的数据最终单位都是字节byte</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = &quot;周杰伦&quot;</span><br><span class="line">bs1 = s.encode(&quot;gbk&quot;)  # b&#x27;xxxx&#x27; bytes类型</span><br><span class="line">bs2 = s.encode(&quot;utf-8&quot;)</span><br><span class="line">print(bs1)</span><br><span class="line">print(bs2)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">怎么把一个gbk的字节转化成utf-8的字节</span></span><br><span class="line">bs = b&#x27;\xd6\xdc\xbd\xdc\xc2\xd7&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先变成文字符号(字符串)</span></span><br><span class="line">s = bs.decode(&quot;gbk&quot;)   # 解码</span><br><span class="line">bs2 = s.encode(&quot;utf-8&quot;)  # 重新编码</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">print</span>(bs2)</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1. str.encode(<span class="string">&quot;编码&quot;</span>)  进行编码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2. bytes.decode(<span class="string">&quot;编码&quot;</span>) 进行解码</span></span><br><span class="line"></span><br><span class="line">s = &quot;abcdefg&quot;</span><br><span class="line">print(s.encode(&quot;gbk&quot;))</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 算数运算</span><br><span class="line">    + - * / % //</span><br><span class="line"><span class="number">2.</span> 比较运算</span><br><span class="line">    &gt; &lt; &gt;= &lt;= == !=</span><br><span class="line"><span class="number">3.</span> 赋值运算</span><br><span class="line">    =  +=, -=, *=.....</span><br><span class="line">    a += b</span><br><span class="line">    a = a + b</span><br><span class="line"></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n  <span class="comment"># sum += n</span></span><br><span class="line">        n = n + <span class="number">1</span>      <span class="comment"># n += 1</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 逻辑运算</span><br><span class="line">    <span class="number">1.</span> <span class="keyword">and</span>, 并且, 左右两端同时成立. 结果才能成立</span><br><span class="line">    <span class="number">2.</span> <span class="keyword">or</span>,  或者, 左右两端有一个成立. 结果就成立</span><br><span class="line">    <span class="number">3.</span> <span class="keyword">not</span>, 非,   非真既假, 非假既真.</span><br><span class="line"></span><br><span class="line">    当<span class="keyword">and</span>和<span class="keyword">or</span>以及<span class="keyword">not</span>同时出现的时候. 最好呢. 加上括号. 不会产生歧义或者不易理解的问题</span><br><span class="line">    如果没有括号怎么办?</span><br><span class="line">    记住运算顺序:</span><br><span class="line">        先算括号 &gt; 算<span class="keyword">not</span> &gt; <span class="keyword">and</span>  &gt; <span class="keyword">or</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 成员运算</span><br><span class="line">    <span class="keyword">in</span>     判断xxx是否在xxxx中出现了</span><br><span class="line">    <span class="keyword">not</span> <span class="keyword">in</span> 判断xxx是否不在xxxx中出现了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">c = a % b  <span class="comment"># 10 / 3 = 3.....1</span></span><br><span class="line">d = a // b</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">让用户输入一个数字. 判断是否是<span class="number">35</span>的倍数</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;来个数: &quot;</span>))</span><br><span class="line"><span class="keyword">if</span> n % <span class="number">35</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;是35的倍数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不是35的倍数&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(a != b)</span><br><span class="line"></span><br><span class="line">a = <span class="number">30</span></span><br><span class="line">b = <span class="number">40</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 互换操作</span></span><br><span class="line">temp = a  <span class="comment"># 备份, 有桌子</span></span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br><span class="line"></span><br><span class="line">下面代码仅适用于python</span><br><span class="line">a, b = b, a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">逻辑运算</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span> <span class="keyword">or</span> <span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>( <span class="keyword">not</span> <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟用户登录.</span></span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;用户名:&quot;</span>)</span><br><span class="line">password = <span class="built_in">input</span>(<span class="string">&quot;密码:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span> <span class="keyword">or</span> <span class="keyword">not</span> <span class="literal">True</span> <span class="keyword">and</span> <span class="literal">True</span> <span class="keyword">or</span> <span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="literal">False</span> <span class="keyword">or</span> <span class="literal">False</span> <span class="keyword">or</span> <span class="literal">False</span> <span class="keyword">or</span> <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,]</span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> <span class="keyword">in</span> lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">666</span> <span class="keyword">not</span> <span class="keyword">in</span> lst)</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 找到这个文件. 双击打开它</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(文件路径, mode=<span class="string">&quot;&quot;</span>, encoding=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    文件路径:</span><br><span class="line">        <span class="number">1.</span> 绝对路径</span><br><span class="line">            d:/test/xxxx.txt</span><br><span class="line">        <span class="number">2.</span> 相对路径</span><br><span class="line">            相对于当前你的程序所在的文件夹</span><br><span class="line">            ../ 上一层文件夹</span><br><span class="line">    mode:</span><br><span class="line">        r : read 读取</span><br><span class="line">        w : write 写</span><br><span class="line">        a : append 追加写入</span><br><span class="line">        b : 读写的是非文本文件  -&gt; <span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span>: 上下文, 不需要手动去关闭一个文件</span><br><span class="line"></span><br><span class="line">    修改文件:</span><br><span class="line">        <span class="number">1.</span> 从源文件中读取内容.</span><br><span class="line">        <span class="number">2.</span> 在内存中进行调整(修改)</span><br><span class="line">        <span class="number">3.</span> 把修改后的内容写入新文件中</span><br><span class="line">        <span class="number">4.</span> 删除源文件. 将新文件重命名成源文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os  <span class="comment"># 和操作系统相关的模块引入</span></span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 和时间相关的模块</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;国产自拍.txt&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">content = f.read()  <span class="comment"># 全部读取</span></span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line">line = f.readline().strip()   <span class="comment"># 去掉字符串左右两端的空白. 空格, 换行, 制表符</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">line = f.readline().strip()</span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">line = f.readline().strip()</span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line">content = f.readlines()</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;呵呵哒&quot;</span>)  <span class="comment"># print内部存在一个换行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;么么哒&quot;</span>)</span><br><span class="line"></span><br><span class="line">最重要的一种文本读取方式(必须掌握)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:   <span class="comment"># 从f中读取到每一行数据</span></span><br><span class="line">    <span class="built_in">print</span>(line.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line"><span class="comment"># w模式下. 如果文件不存在. 自动的创建一个文件</span></span><br><span class="line"><span class="comment"># w模式下. 每一次open都会清空掉文件中的内容</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;嫩模.txt&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;胡辣汤&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.close()  <span class="comment"># 每次操作之后养成好习惯.要关闭链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备一个列表.要求把列表中的每一项内容. 写入到文件中</span></span><br><span class="line">lst = [<span class="string">&#x27;张无忌&#x27;</span>, <span class="string">&quot;汪峰&quot;</span>, <span class="string">&quot;章子怡&quot;</span>, <span class="string">&quot;赵敏&quot;</span>]</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;打架.txt&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># 大多数情况下要把open写循环外面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> lst:</span><br><span class="line">    f.write(item)</span><br><span class="line">    f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># a模式</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;打架.txt&quot;</span>, mode=<span class="string">&quot;a&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">f.write(<span class="string">&quot;你好厉害&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;国产自拍.txt&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># f = open()</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">想要读取图片</span><br><span class="line">在读写非文本文件的时候要加上b</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;胡一菲.jpeg&quot;</span>, mode=<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件的复制:</span></span><br><span class="line"><span class="comment"># 从源文件中读取内容. 写入到新路径去</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;胡一菲.jpeg&quot;</span>, mode=<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f1, \</span><br><span class="line">     <span class="built_in">open</span>(<span class="string">&quot;../01_初识python/胡二飞.jpeg&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">     <span class="keyword">for</span> line <span class="keyword">in</span> f1:</span><br><span class="line">         f2.write(line)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件修改</span></span><br><span class="line"><span class="comment"># 把文件中的周 -&gt; 张</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;人名单.txt&quot;</span>, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f1, \</span><br><span class="line">     <span class="built_in">open</span>(<span class="string">&quot;人名单_副本.txt&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f1:</span><br><span class="line">        line = line.strip()   <span class="comment"># 去掉换行</span></span><br><span class="line">        <span class="keyword">if</span> line.startswith(<span class="string">&quot;周&quot;</span>):</span><br><span class="line">            line = line.replace(<span class="string">&quot;周&quot;</span>, <span class="string">&quot;张&quot;</span>)  <span class="comment"># 修改</span></span><br><span class="line"></span><br><span class="line">        f2.write(line)</span><br><span class="line">        f2.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">3</span>)  <span class="comment"># 让程序休眠3秒钟</span></span><br><span class="line"><span class="comment"># 删除源文件</span></span><br><span class="line">os.remove(<span class="string">&quot;人名单.txt&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 把副本文件重命名成源文件</span></span><br><span class="line">os.rename(<span class="string">&quot;人名单_副本.txt&quot;</span>, <span class="string">&quot;人名单.txt&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="函数编程-上"><a href="#函数编程-上" class="headerlink" title="函数编程_上"></a>函数编程_上</h1><blockquote><p>函数: 对某一个特定的功能或者代码块进行封装. 在需要使用该功能的时候直接调用即可</p><p>定义:</p><p>def 函数的名字():</p><p> 被封装的功能或者代码块-&gt;函数体</p><p>调用:</p><p>函数的名字()</p><p>好处: 让程序更加简洁. 代码更加合理</p></blockquote><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">buy_cai</span>():  <span class="comment"># 定义函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1. 打车&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2. 去菜市场&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3. 讨价还价&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;4. 回家&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buy_cai()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;哄哄孙子&quot;</span>)</span><br><span class="line">buy_cai()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;冲洗马桶&quot;</span>)</span><br><span class="line">buy_cai()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;打打老头&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h2><blockquote><p>参数: 可以在函数调用的时候. 给函数传递一些信息</p><p>分类:</p><ol><li><p>形参, 在函数定义的时候. 需要准备一些变量来接收信息</p><ol><li>位置参数, 按照位置一个一个的去声明变量</li><li>默认值参数,  在函数声明的时候给变量一个默认值, 如果实参不传递信息. 此时默认值生效, 否则就不生效</li><li>动态传参.<ol><li>*args,  表示接收所有的位置参数的动态传参</li><li>**kwargs, 表示接收所有的关键字的动态传参</li></ol></li></ol><p> 顺序*: 位置 &gt; *args &gt; 默认值 &gt; **kwargs</p><p> 上述参数可以随意搭配使用</p><ol start="2"><li>实参, 实际在调用的时候传递的信息</li><li>位置参数. 按照位置进行传递参数</li><li>关键字参数. 按照参数的名字进行传递参数</li><li>混合参数.<br> 顺序: 位置参数放前面, 关键字参数放后面 -&gt; 否则报错! 官方不让这么干<br> 实参在执行的时候. 必须要保障形参有数据</li></ol></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.骂谁?  2.骂道什么程度?</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maren</span>(<span class="params">ren, lvl</span>):  <span class="comment"># 形参</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1. 怒目而视&quot;</span>, ren)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2. 验证交涉&quot;</span>, ren)</span><br><span class="line">    <span class="keyword">if</span> lvl &gt; <span class="number">99</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;3. 死不要脸&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;3. 你愁啥&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;4. 骂完手工&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">maren(<span class="string">&quot;破键盘&quot;</span>, <span class="number">188</span>)  <span class="comment"># 在调用函数的时候. 才能知道到底骂谁, 骂道什么程度  -&gt; 实参</span></span><br><span class="line">maren(<span class="string">&quot;破鼠标&quot;</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment"># maren(&quot;破电脑&quot;, 999)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">请用函数编写一个计算器, 能计算 + - * / 四则运算  a + b</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jisuan</span>(<span class="params">a, opt, b</span>):</span><br><span class="line">    <span class="keyword">if</span> opt == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a + b)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a - b)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a * b)</span><br><span class="line">    <span class="keyword">elif</span> opt == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(a / b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;滚犊子&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jisuan(<span class="number">999</span>, <span class="string">&quot;+&quot;</span>, <span class="number">666</span>)</span><br><span class="line">jisuan(<span class="number">999</span>, <span class="string">&quot;-&quot;</span>, <span class="number">666</span>)</span><br><span class="line">jisuan(<span class="number">999</span>, <span class="string">&quot;*&quot;</span>, <span class="number">666</span>)</span><br><span class="line">jisuan(<span class="number">999</span>, <span class="string">&quot;/&quot;</span>, <span class="number">666</span>)</span><br><span class="line">jisuan(<span class="number">999</span>, <span class="string">&quot;^&amp;*&quot;</span>, <span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实参分类</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chi</span>(<span class="params">zhu, fu, tang, tian</span>):</span><br><span class="line">    <span class="built_in">print</span>(zhu, fu, tang, tian)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># chi(&quot;大米饭&quot;, &quot;西红柿炒鸡蛋&quot;, &quot;紫菜蛋花汤&quot;, &quot;哈根达斯&quot;)</span></span><br><span class="line"><span class="comment"># chi(zhu=&quot;小米饭&quot;, tang=&quot;胡辣汤&quot;, fu=&quot;韭菜炒大腰子&quot;, tian=&quot;老中街冰棍&quot;)</span></span><br><span class="line"><span class="comment"># chi(&quot;小米饭&quot;, &quot;胡辣汤&quot;, tang=&quot;韭菜炒大腰子&quot;, tian=&quot;老中街冰棍&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chi()  实参在执行的时候. 必须要保障形参有数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;xxxx&quot;</span>, mode=<span class="string">&quot;xx&quot;</span>, encoding=<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">形参分类:</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">luru</span>(<span class="params">name, age, gender=<span class="string">&quot;男&quot;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(name, age, gender)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">luru(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>)</span><br><span class="line">luru(<span class="string">&quot;李四&quot;</span>, <span class="number">28</span>)</span><br><span class="line">luru(<span class="string">&quot;王二麻子&quot;</span>, <span class="number">38</span>)</span><br><span class="line">luru(<span class="string">&quot;吴老二&quot;</span>, <span class="number">14</span>)</span><br><span class="line">luru(<span class="string">&quot;赵敏&quot;</span>, <span class="number">12</span>, <span class="string">&quot;女&quot;</span>)</span><br><span class="line">luru(<span class="string">&quot;周芷若&quot;</span>, <span class="number">11</span>, <span class="string">&quot;女&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chi</span>(<span class="params">*food</span>):  <span class="comment"># * 表示位置参数的动态传参, *接收到的值会被统一放在一个元组里面</span></span><br><span class="line">    <span class="built_in">print</span>(food)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chi(<span class="string">&#x27;大米饭&#x27;</span>, <span class="string">&quot;烧茄子&quot;</span>, <span class="string">&#x27;紫菜蛋花汤&#x27;</span>, <span class="string">&quot;哈根达斯&quot;</span>)</span><br><span class="line">chi(<span class="string">&quot;大米饭&quot;</span>)</span><br><span class="line">chi(<span class="string">&quot;大米饭&quot;</span>, <span class="string">&quot;烧茄子&quot;</span>)</span><br><span class="line">chi(<span class="string">&quot;大米饭&quot;</span>, <span class="string">&quot;紫菜蛋花汤&quot;</span>)</span><br><span class="line">chi(<span class="string">&quot;大米饭&quot;</span>, <span class="string">&quot;紫菜蛋花汤&quot;</span>, <span class="string">&quot;紫菜蛋花汤&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chi</span>(<span class="params">**food</span>):  <span class="comment"># ** 表示接收关键字的动态传参, 接收到的所有参数都会被处理成字典</span></span><br><span class="line">    <span class="built_in">print</span>(food)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chi(fu=<span class="string">&quot;木须柿子&quot;</span>, zhu=<span class="string">&quot;小米饭&quot;</span>)</span><br><span class="line"></span><br><span class="line">            何时能产生默认值</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b, *args, c=<span class="string">&quot;哈哈&quot;</span>, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(a, b, c, args, kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, c=<span class="string">&quot;呵呵&quot;</span>, hello=<span class="number">456</span>, hahalou =<span class="number">654</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args, **kwargs</span>):  <span class="comment"># 没有限制的接收任何参数</span></span><br><span class="line">    <span class="built_in">print</span>(args, kwargs)</span><br><span class="line"></span><br><span class="line">func()  <span class="comment"># (), &#123;&#125;</span></span><br><span class="line">func(<span class="number">1</span>) <span class="comment">#  (1, ), &#123;&#125;</span></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>, a=<span class="number">2</span>)  <span class="comment"># (1,2,3,4,4), &#123;&quot;a&quot;:2&#125;</span></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>, c=<span class="number">4</span>, a=<span class="number">2</span>)<span class="comment"># (1,2,3,4), &#123;&quot;c&quot;:4, &quot;a&quot;:2&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu_lst = [<span class="string">&quot;流川枫&quot;</span>, <span class="string">&#x27;樱木&#x27;</span>, <span class="string">&quot;大老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>, <span class="string">&quot;隔壁二老王&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(*stu_lst)   <span class="comment"># *在实参位置, 是把列表打散成位置参数进行传递</span></span><br><span class="line">                 <span class="comment"># ** 在实参位置, 可以把字典自动转化成关键字参数进行传递</span></span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><blockquote><p>返回值: 函数执行之后. 会给调用方一个结果. 这个结果就是返回值</p><p>​    关于return:<br>​        函数只要执行到了return. 函数就会立即停止并返回内容. 函数内的return的后续的代码不会执行<br>​       1. 如果函数内没有return , 此时外界收到的是None<br>​               2. 如果写了return<br>​           1. 只写了return, 后面不跟数据, 此时接收到的依然是None  -&gt; 相当于break<br>​           2. return 值 , 此时表示函数有一个返回值, 外界能够收到一个数据 -&gt; 用的最多<br>​           3. return 值1, 值2, 值3….., 此时函数有多个返回值, 外界收到的是元组, 并且, 该元组内存放所有的返回值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="comment"># print(a + b)</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = func(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(ret * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># return None</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    <span class="keyword">return</span>   <span class="comment"># 会让程序停止.  后续代码不会继续执行. 有点儿像循环里面的break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">456</span>)</span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><blockquote><p><a href="https://www.processon.com/view/link/5dbfcf15e4b09df5518ee260">https://www.processon.com/view/link/5dbfcf15e4b09df5518ee260</a></p><p>内置函数: 直接能拿来用的函数</p><p>print</p><p>input</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;123&quot;</span></span><br><span class="line">i = <span class="built_in">int</span>(s)</span><br><span class="line">b = <span class="built_in">bool</span>(s)</span><br><span class="line">f = <span class="built_in">float</span>(s)</span><br><span class="line"><span class="built_in">complex</span> 复数: 实部+虚部</span><br><span class="line"></span><br><span class="line"><span class="comment"># bin, oct, hex</span></span><br><span class="line">a = <span class="number">18</span>  <span class="comment"># 十进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(a))  <span class="comment"># 0b10010</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(a))  <span class="comment"># 0o22</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(a))  <span class="comment"># 0x12</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0b10010</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(a))  <span class="comment"># 二进制转化成十进制</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sum, min, max, pow</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(a, b))</span><br><span class="line"><span class="built_in">print</span>(a ** b)  <span class="comment"># 次幂</span></span><br><span class="line"></span><br><span class="line">lst = [<span class="number">12</span>,<span class="number">456</span>,<span class="number">32</span>,<span class="number">18</span>,<span class="number">64</span>,<span class="number">57</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(lst))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(lst))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(lst))</span><br><span class="line"></span><br><span class="line">s = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#125;</span><br><span class="line">lst = <span class="built_in">list</span>(<span class="string">&quot;呵呵哒&quot;</span>)  <span class="comment"># 内部一定会有一个循环(for)</span></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">slice</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>)  <span class="comment"># [1:4:2]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;呵呵呵呵呵呵呵呵呵&quot;</span>[s])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">format</span>, <span class="built_in">ord</span>, <span class="built_in">chr</span></span><br><span class="line"><span class="built_in">format</span> 格式化</span><br><span class="line">a = <span class="number">18</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(a, <span class="string">&quot;08b&quot;</span>))  <span class="comment"># b: 二进制, o: 八进制, x: 十六进制</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;中&quot;</span>  <span class="comment"># python的内存中使用的是unicode</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(a))  <span class="comment"># 中国的中字在unicode中码位是20013</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">20013</span>))  <span class="comment"># 给出编码位置. 展示出文字</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65536</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i)+<span class="string">&quot; &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">enumerate</span>, <span class="built_in">all</span>, <span class="built_in">any</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">all</span>([<span class="number">1</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&#x27;豆沙包&#x27;</span>]))   <span class="comment"># 当成and来看  t and t and t</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>([<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&#x27;&#x27;</span>]))  <span class="comment"># 当成or来看</span></span><br><span class="line">lst = [<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;张翠山&quot;</span>, <span class="string">&quot;张三丰&quot;</span>, <span class="string">&quot;张大大&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(lst):</span><br><span class="line">    <span class="built_in">print</span>(index, item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst)):</span><br><span class="line">    <span class="built_in">print</span>(i, lst[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;呵呵哒&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hash</span>(s))  <span class="comment"># 一定是一个数字 -&gt; 想办法转化成内存地址. 然后进行数据的存储 -&gt; 字典(集合)哈希表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(s))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(<span class="built_in">str</span>))</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;呵呵哒&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(s))  <span class="comment"># 当前这个数据能执行哪些操作</span></span><br></pre></td></tr></table></figure><h1 id="函数编程-下"><a href="#函数编程-下" class="headerlink" title="函数编程_下"></a>函数编程_下</h1><h2 id="本章概括"><a href="#本章概括" class="headerlink" title="本章概括"></a>本章概括</h2><blockquote><p> 函数的嵌套</p><p> 变量的作用域</p><p> 闭包</p><p> 装饰器</p><p>​    def wrapper(fn):</p><p>​      def inner(*args, **kwargs);</p><p>​        ret &#x3D; fn(*args, **kwargs)</p><p>​        return ret</p><p>​      return inner</p><p>​    @wrapper</p><p>​    def func():</p><p>​      pass</p><p> 迭代器</p><p> 生成器</p><p>​    yield</p><p>​    g &#x3D; (x for x in xx)</p><p> 推导式</p><p> 匿名函数</p><p> python内置函数_下 sorted, filter, map</p></blockquote><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">作用域: 变量的访问权限</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">总结: 里面访问外面没问题, 外面访问里面不能直接访问到</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">10</span>  <span class="comment"># 全局变量 -&gt; 全局作用域</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():   <span class="comment"># 全局的一个函数</span></span><br><span class="line">    b = <span class="number">20</span>   <span class="comment"># 局部变量, 局部作用域</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func()</span></span><br><span class="line"><span class="comment"># print(b)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>():</span><br><span class="line">    func()</span><br><span class="line">func3()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    c = <span class="number">10086</span></span><br><span class="line">    <span class="keyword">return</span> c  <span class="comment"># 如果想要在函数外面访问到函数内部的东西. 必须要return</span></span><br><span class="line"></span><br><span class="line">c1 = func()</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">函数可以嵌套函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">综上:</span></span><br><span class="line"><span class="string">    1, 函数可以作为返回值进行返回</span></span><br><span class="line"><span class="string">    2, 函数可以作为参数进行互相传递</span></span><br><span class="line"><span class="string">    函数名实际上就是一个变量名, 都表示一个内存地址</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    func1()  <span class="comment"># 这个叫函数的调用. 不叫嵌套</span></span><br><span class="line"></span><br><span class="line">func2()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    b = <span class="number">20</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>():  <span class="comment"># 函数的嵌套, 局部变量</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># func2 = def():</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">    func2()  <span class="comment"># 局部的东西. 一般都是在局部自己访问使用的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func1())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">456</span>)</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">func3</span>():</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">789</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">        func3()</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    func2()</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    <span class="built_in">print</span>(inner)</span><br><span class="line">    <span class="keyword">return</span> inner  <span class="comment"># 返回的是一个函数, 此时我们把一个函数当成一个变量进行返回的</span></span><br><span class="line"></span><br><span class="line">b1 = func()  <span class="comment"># b1是func的内部inner</span></span><br><span class="line"><span class="built_in">print</span>(b1)</span><br><span class="line">b1()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">an</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">an()</span><br><span class="line">bn = an</span><br><span class="line">bn()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理模式</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">an</span>):  <span class="comment"># 此时an收到的是一个函数</span></span><br><span class="line">    an()  <span class="comment"># 执行这个函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">target</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是target&quot;</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="number">456</span></span><br><span class="line">func(target)  <span class="comment"># 实参可以是函数</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="两个关键字"><a href="#两个关键字" class="headerlink" title="两个关键字"></a>两个关键字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">global : 在局部. 引入全局变量</span></span><br><span class="line"><span class="string">nonlocal: 在局部, 引入外层的局部变量</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="comment"># print(a)</span></span><br><span class="line">    <span class="comment"># 此时我就想在函数内部修改全局的变量a</span></span><br><span class="line">    <span class="keyword">global</span> a  <span class="comment"># 把外面的全局变量引入到局部</span></span><br><span class="line">    a = <span class="number">20</span>  <span class="comment"># 创建一个局部变量. 并没有去改变全局变量中的a</span></span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> a  <span class="comment"># 向外找一层. 看看有没有该变量. 如果有就引入, 如果没有, 继续向外一层, 直到全局(不包括)</span></span><br><span class="line">        a = <span class="number">20</span></span><br><span class="line">    func2()</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">闭包: 本质, 内层函数对外层函数的局部变量的使用. 此时内层函数被称为闭包函数</span></span><br><span class="line"><span class="string">    1. 可以让一个变量常驻与内存</span></span><br><span class="line"><span class="string">    2. 可以避免全局变量被修改</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line">a = <span class="number">20</span></span><br><span class="line"><span class="comment"># inner =&gt; ret =&gt; 什么时候执行</span></span><br><span class="line">r1 = ret()</span><br><span class="line"><span class="built_in">print</span>(r1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1000000</span></span><br><span class="line"></span><br><span class="line">r2 = ret()</span><br><span class="line"><span class="built_in">print</span>(r2)</span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">内容回顾:</span></span><br><span class="line"><span class="string">    1. 函数可以做为参数进行传递</span></span><br><span class="line"><span class="string">    2. 函数可以作为返回值进行返回</span></span><br><span class="line"><span class="string">    3. 函数名称可以当成变量一样进行赋值操作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">装饰器:   -&gt; 要求记住最后的结论</span></span><br><span class="line"><span class="string">    装饰器本质上是一个闭包</span></span><br><span class="line"><span class="string">    作用:</span></span><br><span class="line"><span class="string">        在不改变原有函数调用的情况下. 给函数增加新的功能.</span></span><br><span class="line"><span class="string">        直白: 可以在函数前后添加新功能, 但是不改原来的代码</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    在用户登录的地方, 日志.</span></span><br><span class="line"><span class="string">    通用装饰器的写法:</span></span><br><span class="line"><span class="string">        def wrapper(fn):   wrapper: 装饰器, fn: 目标函数</span></span><br><span class="line"><span class="string">            def inner(*args, **kwargs):</span></span><br><span class="line"><span class="string">                # 在目标函数执行之前.....</span></span><br><span class="line"><span class="string">                ret = fn(*args, **kwargs)   #   执行目标函数</span></span><br><span class="line"><span class="string">                # 在目标函数执行之后.....</span></span><br><span class="line"><span class="string">                return ret</span></span><br><span class="line"><span class="string">            return inner     千万别加()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @wrapper</span></span><br><span class="line"><span class="string">        def target():</span></span><br><span class="line"><span class="string">            pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        target()  #  =&gt;  inner()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    一个函数可以被多个装饰器装饰.</span></span><br><span class="line"><span class="string">    @wrapper1</span></span><br><span class="line"><span class="string">    @wrapper2</span></span><br><span class="line"><span class="string">    def target():</span></span><br><span class="line"><span class="string">        print(&#x27;我是目标&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    规则和规律 wrapper1 wrapper2 TARGET wrapper2 wrapper1</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是函数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gggg</span>(<span class="params">fn</span>):  <span class="comment"># fn要求是个函数</span></span><br><span class="line">    fn()  <span class="comment"># func()</span></span><br><span class="line"></span><br><span class="line">gggg(func)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line">ret()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是函数1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是函数2&quot;</span>)</span><br><span class="line"></span><br><span class="line">func1 = func2</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guanjia</span>(<span class="params">game</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打开外挂&quot;</span>)</span><br><span class="line">        game()  <span class="comment"># 玩起来了</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;关闭外挂&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@guanjia     </span><span class="comment"># 相当于 play_dnf = guanjia(play_dnf)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_dnf</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你好啊, 我叫赛利亚, 今天又是美好的一天!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@guanjia</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_lol</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;德玛西亚!!!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># play_dnf = guanjia(play_dnf)  # 让管家把游戏重新封装一遍. 我这边把原来的游戏替换了</span></span><br><span class="line"><span class="comment"># play_lol = guanjia(play_lol)  # 让管家把lol也重新封装一下.</span></span><br><span class="line"></span><br><span class="line">play_dnf()  <span class="comment"># 此时运行的是管家给的内层函数inner</span></span><br><span class="line">play_lol()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guanjia</span>(<span class="params">game</span>):</span><br><span class="line">    <span class="comment">#         *, **表示接收所有参数, 打包成元组和字典</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):  <span class="comment"># inner添加了参数, args 一定是一个元组  kwargs 一定是字典 (admin, 123456, &quot;大盖伦&quot;)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打开外挂&quot;</span>)</span><br><span class="line">        <span class="comment">#    *, ** 表示把args元组和kwargs字典打散成 位置参数以及关键字参数传递进去</span></span><br><span class="line">        game(*args, **kwargs)  <span class="comment"># 玩起来了  # game(&#x27;admin&#x27;, &#x27;123456&#x27;, &quot;大盖伦&quot;)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;关闭外挂&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@guanjia  </span><span class="comment"># play_dnf = guanjia(play_dnf)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_dnf</span>(<span class="params">username, password</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我要开始玩儿dnf了. &quot;</span>, username, password)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你好啊, 我叫赛利亚, 今天又是美好的一天!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@guanjia</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_lol</span>(<span class="params">username, password, hero</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我要开始玩儿lol了. &quot;</span>, username, password, hero)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;德玛西亚!!!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">play_dnf(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123465&quot;</span>)  <span class="comment"># inner</span></span><br><span class="line">play_lol(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;456789&quot;</span>, <span class="string">&quot;大盖伦&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guanjia</span>(<span class="params">game</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;打开外挂&quot;</span>)</span><br><span class="line">        ret = game(*args, **kwargs)  <span class="comment"># 这里是目标函数的执行, 这里是能够拿到从目标函数返回的返回值的.</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;关闭外挂&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@guanjia</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_dnf</span>(<span class="params">username, password</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我要开始玩儿dnf了. &quot;</span>, username, password)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;你好啊, 我叫赛利亚, 今天又是美好的一天!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;一把屠龙刀&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_lol</span>(<span class="params">username, password, hero</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我要开始玩儿lol了. &quot;</span>, username, password, hero)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;德玛西亚!!!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = play_dnf(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;123465&quot;</span>)  <span class="comment"># inner</span></span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper1</span>(<span class="params">fn</span>):  <span class="comment"># fn: wrapper2.inner</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这里是wrapper1 进入&quot;</span>)  <span class="comment"># 1</span></span><br><span class="line">        ret = fn(*args, **kwargs)  <span class="comment"># wrapper2.inner</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这里是wrapper1 出去&quot;</span>)  <span class="comment"># 5</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper2</span>(<span class="params">fn</span>):  <span class="comment"># fn: target</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这里是wrapper2 进入&quot;</span>)  <span class="comment"># 2</span></span><br><span class="line">        ret = fn(*args, **kwargs)  <span class="comment"># taget</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这里是wrapper2 出去&quot;</span>)  <span class="comment"># 4</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapper1  </span><span class="comment"># target = wrapper1(wrapper2.inner)   =&gt;  target: wrapp1.inner</span></span><br><span class="line"><span class="meta">@wrapper2  </span><span class="comment"># target = wrapper2(target)   =&gt; target: wrapper2.inner</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">target</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;我是目标&#x27;</span>)  <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line">target()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这里是wrapper1 进入</span></span><br><span class="line"><span class="string">这里是wrapper2 进入</span></span><br><span class="line"><span class="string">我是目标</span></span><br><span class="line"><span class="string">这里是wrapper2 出去</span></span><br><span class="line"><span class="string">这里是wrapper1 出去</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">login_flag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login_verify</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">global</span> login_flag</span><br><span class="line">        <span class="keyword">if</span> login_flag == <span class="literal">False</span>:  <span class="comment"># ????</span></span><br><span class="line">            <span class="comment"># 这里完成登录校验</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;还未完成用户登录操作&#x27;</span>)</span><br><span class="line">            <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">                username = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">                password = <span class="built_in">input</span>(<span class="string">&quot;&gt;&gt;&gt;&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">                    login_flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;登录失败, 用户名或密码错误&quot;</span>)</span><br><span class="line">        ret = fn(*args, **kwargs)  <span class="comment"># 后续程序的执行</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;添加员工信息&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;删除信息&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upd</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;修改信息&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@login_verify</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;查询员工信息&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">upd()</span><br><span class="line">delete()</span><br><span class="line">search()</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">for 变量 in 可迭代:</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">iterable: 可迭代的东西</span></span><br><span class="line"><span class="string">iterator: 迭代器</span></span><br><span class="line"><span class="string">str, list, tuple, dict, set, open()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">可迭代的数据类型都会提供一个叫迭代器的东西. 这个迭代器可以帮我们把数据类型中的所有数据逐一的拿到</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">获取迭代器的两种方案:</span></span><br><span class="line"><span class="string">    1. iter() 内置函数可以直接拿到迭代器</span></span><br><span class="line"><span class="string">    2. __iter__()   特殊方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">从迭代器中拿到数据:</span></span><br><span class="line"><span class="string">    1. next() 内置函数</span></span><br><span class="line"><span class="string">    2. __next__() 特殊方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for里面一定是要拿迭代器的. 所以所有不可迭代的东西不能用for循环</span></span><br><span class="line"><span class="string">for循环里面一定有__next__出现</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">总结: 迭代器统一了不同数据类型的遍历工作</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">迭代器本身也是可迭代的</span></span><br><span class="line"><span class="string">迭代器本身的特性:</span></span><br><span class="line"><span class="string">    1. 只能向前不能反复</span></span><br><span class="line"><span class="string">    2. 特别节省内存</span></span><br><span class="line"><span class="string">    3. 惰性机制</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">it = <span class="built_in">iter</span>(<span class="string">&quot;你叫什么名字啊&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))  <span class="comment"># StopIteration: 迭代已经停止了. 不可以再次从迭代器中拿数据了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">it = <span class="string">&quot;呵呵哒&quot;</span>.__iter__()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(it.__next__())</span><br><span class="line"><span class="built_in">print</span>(it.__next__())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(it))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟for循环工作原理:</span></span><br><span class="line">s = <span class="string">&quot;我是数据&quot;</span></span><br><span class="line">it = s.__iter__()  <span class="comment"># 拿到迭代器</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = it.__next__()</span><br><span class="line">        <span class="built_in">print</span>(data)  <span class="comment"># for循环的循环体</span></span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">123456</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;你好啊, 我叫赛利亚&quot;</span></span><br><span class="line">it = s.__iter__()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> mm <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span>(mm)</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>## 生成器</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">生成器(generator):</span></span><br><span class="line"><span class="string">    生成器的本质就是迭代器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    创建生成器的两种方案:</span></span><br><span class="line"><span class="string">        1. 生成器函数</span></span><br><span class="line"><span class="string">        2. 生成器表达式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    生成器函数</span></span><br><span class="line"><span class="string">        生成器函数中有一个关键字yield</span></span><br><span class="line"><span class="string">        生成器函数执行的时候, 并不会执行函数, 得到的是生成器.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        yield: 只要函数中出现了yield. 它就是一个生成器函数</span></span><br><span class="line"><span class="string">            作用:</span></span><br><span class="line"><span class="string">                1. 可以返回数据</span></span><br><span class="line"><span class="string">                2. 可以分段的执行函数中的内容, 通过__next__()可以执行到下一个yield位置</span></span><br><span class="line"><span class="string">        优势:</span></span><br><span class="line"><span class="string">            用好了, 特别的节省内存</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    生成器表达式 -&gt; 一次性的</span></span><br><span class="line"><span class="string">        语法: (数据 for循环 if)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123456</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">999</span>  <span class="comment"># yield也有返回的意思.</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="comment"># print(ret)  # &lt;generator object func at 0x115f2dbd0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(ret.__next__())  <span class="comment"># yield只有执行到next的时候才会返回数据</span></span><br><span class="line"><span class="built_in">print</span>(ret.__next__())  <span class="comment"># StopIteration</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">666</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">456</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">999</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="built_in">print</span>(ret.__next__())</span><br><span class="line"><span class="built_in">print</span>(ret.__next__())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">去工厂定制<span class="number">10000</span>件衣服</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order</span>():</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        lst.append(<span class="string">f&quot;衣服<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> lst</span><br><span class="line"></span><br><span class="line">lst = order()</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">order</span>():</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        lst.append(<span class="string">f&quot;衣服<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(lst) == <span class="number">50</span>:</span><br><span class="line">            <span class="keyword">yield</span> lst</span><br><span class="line">            <span class="comment"># 下一次拿数据</span></span><br><span class="line">            lst = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gen = order()</span><br><span class="line"><span class="built_in">print</span>(gen.__next__())</span><br><span class="line"><span class="built_in">print</span>(gen.__next__())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gen = (i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> gen:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line">lst = <span class="built_in">list</span>(gen)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">list</span>(<span class="string">&quot;周杰伦&quot;</span>)  <span class="comment"># list() =&gt;  for  =&gt; next()</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><h2 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">推导式:</span></span><br><span class="line"><span class="string">    简化代码.</span></span><br><span class="line"><span class="string">    语法:</span></span><br><span class="line"><span class="string">        列表推导式: [数据 for循环 if判断]</span></span><br><span class="line"><span class="string">        集合推导式: &#123;数据 for循环 if判断&#125;</span></span><br><span class="line"><span class="string">        字典推导式: &#123;k:v for循环 if判断&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    不要把推导式妖魔化.</span></span><br><span class="line"><span class="string">    (数据 for循环 if判断)  -&gt; 不是元组推导式, 根本就没有元组推导式.  这玩意叫生成器表达式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    lst.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 请创建一个列表[1,3,5,7,9]</span></span><br><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>)]</span><br><span class="line">lst = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 生成50件衣服</span></span><br><span class="line">lst = [<span class="string">f&quot;衣服<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>)]</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 将如下列表中所有的英文字母修改成大写</span></span><br><span class="line">lst1 = [<span class="string">&quot;allen&quot;</span>, <span class="string">&quot;tony&quot;</span>, <span class="string">&quot;kevin&quot;</span>, <span class="string">&quot;sylar&quot;</span>]</span><br><span class="line">lst2 = [item.upper() <span class="keyword">for</span> item <span class="keyword">in</span> lst1]</span><br><span class="line"><span class="built_in">print</span>(lst2)</span><br><span class="line"></span><br><span class="line">s = &#123;i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 请将下列的列表修改成字典, 要求 索引做为key, 数据作为value</span></span><br><span class="line">lst = [<span class="string">&#x27;赵本山&#x27;</span>, <span class="string">&quot;潘长江&quot;</span>, <span class="string">&quot;高达&quot;</span>, <span class="string">&quot;奥特曼&quot;</span>]</span><br><span class="line"></span><br><span class="line">dic = &#123;i: lst[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst))&#125;</span><br><span class="line"><span class="built_in">print</span>(dic)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">匿名函数:</span></span><br><span class="line"><span class="string">    lambda表达式</span></span><br><span class="line"><span class="string">    语法:</span></span><br><span class="line"><span class="string">        变量 = lambda 参数,参数2,参数3....: 返回值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123456</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">9999</span></span><br><span class="line"></span><br><span class="line">ret = func()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">ret = func(<span class="number">13</span>, <span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line">ret = fn(<span class="number">12</span>, <span class="number">13</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="内置函数-第二部分"><a href="#内置函数-第二部分" class="headerlink" title="内置函数_第二部分"></a>内置函数_第二部分</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">zip: 可以把多个可迭代内容进行合并</span></span><br><span class="line"><span class="string">sorted: 排序</span></span><br><span class="line"><span class="string">filter: 筛选</span></span><br><span class="line"><span class="string">map:    映射</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#        0         1       2</span></span><br><span class="line">lst1 = [<span class="string">&quot;赵本山&quot;</span>, <span class="string">&quot;范伟&quot;</span>, <span class="string">&#x27;苏有朋&#x27;</span>]</span><br><span class="line">lst2 = [<span class="number">40</span>, <span class="number">38</span>, <span class="number">42</span>]</span><br><span class="line">lst3 = [<span class="string">&quot;卖拐&quot;</span>, <span class="string">&quot;耳朵大有福&quot;</span>, <span class="string">&quot;情深深雨蒙蒙&quot;</span>]</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lst1)):</span><br><span class="line">    first = lst1[i]</span><br><span class="line">    second = lst2[i]</span><br><span class="line">    third = lst3[i]</span><br><span class="line">    result.append((first, second, third))</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">zip</span>(lst1, lst2, lst3)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line">lst = <span class="built_in">list</span>(result)</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">188</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">locals</span>())  <span class="comment"># 此时locals被写在了全局作用域范围内. 此时看到的就是全局作用域中的内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    a = <span class="number">336</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">locals</span>())  <span class="comment"># 此时locals放在局部作用域范围, 看到的就是局部作用域的内容</span></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">globals</span>())  <span class="comment"># globals看到的是全局作用域中的内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    a = <span class="number">336</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">globals</span>())</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line">lst = [<span class="number">16</span>,<span class="number">22</span>,<span class="number">68</span>,<span class="number">1</span>,<span class="number">147</span>,<span class="number">256</span>,<span class="number">49</span>]</span><br><span class="line">s = <span class="built_in">sorted</span>(lst, reverse=<span class="literal">True</span>)  <span class="comment"># reverse翻转</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#       1      3        2       4           123132</span></span><br><span class="line">lst = [<span class="string">&quot;秋&quot;</span>, <span class="string">&quot;张二嘎&quot;</span>, <span class="string">&quot;比克&quot;</span>, <span class="string">&quot;卡卡罗特&quot;</span>, <span class="string">&quot;超级宇宙无敌大帅B&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># def func(item):  # item对应的就是列表中的每一项数据</span></span><br><span class="line"><span class="comment">#     return len(item)</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">sorted</span>(lst, key=<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x))</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lst = [</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;周润发&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">18</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">5200</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">2</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;周星驰&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">28</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">511100</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">3</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;周海媚&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">78</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">561230</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">4</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;周伯通&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">12</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">532100</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">5</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;周大兴&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">35</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">53210</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">6</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;周周有辣&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">47</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">520</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">7</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;周扒皮&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">8</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">12</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.根据每个人的年龄排序</span></span><br><span class="line">s = <span class="built_in">sorted</span>(lst, key=<span class="keyword">lambda</span> d: d[<span class="string">&#x27;age&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.根据工资进行排序. 从大到小</span></span><br><span class="line">s = <span class="built_in">sorted</span>(lst, key=<span class="keyword">lambda</span> d: d[<span class="string">&#x27;salary&#x27;</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#        T         T     T         F            F</span></span><br><span class="line">lst = [<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;张三丰&quot;</span>, <span class="string">&quot;张翠山&quot;</span>, <span class="string">&quot;灭绝小师太&quot;</span>, <span class="string">&quot;小狐仙&quot;</span>]</span><br><span class="line">f = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.startswith(<span class="string">&quot;张&quot;</span>), lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(f))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">result = [item * item <span class="keyword">for</span> item <span class="keyword">in</span> lst]</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * x, lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">递归:  函数自己调用自己</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">递归如果没有任何东西拦截的话. 它默认就是一个死循环</span></span><br><span class="line"><span class="string">python默认是有递归深度的限制的. 默认的最大递归深度是1000</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sys.getrecursionlimit())</span><br><span class="line">sys.setrecursionlimit(<span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xxxx</span>(<span class="params">a, b, c</span>):</span><br><span class="line"></span><br><span class="line">    xxxxxx</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xxxx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 各种加密</title>
      <link href="/2023/05/22/python%20%E5%90%84%E7%A7%8D%E5%8A%A0%E5%AF%86/"/>
      <url>/2023/05/22/python%20%E5%90%84%E7%A7%8D%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><meta name="referrer" content="no-referrer"># 各种加密逻辑<p>​在我们进行js逆向的时候. 总会遇见一些我们人类无法直接能理解的东西出现. 此时你看到的大多数是被加密过的密文. </p><h2 id="一-一切从MD5开始"><a href="#一-一切从MD5开始" class="headerlink" title="一. 一切从MD5开始"></a>一. 一切从MD5开始</h2><p>MD5是一个非常常见的摘要(hash)逻辑.  其特点就是小巧. 速度快. 极难被破解(王小云女士). 所以, md5依然是国内非常多的互联网公司选择的密码摘要算法. </p><p>在数学上. 摘要其实计算逻辑就是hash. </p><p>hash(数据)  &#x3D;&gt; 数字</p><pre><code> 1. 密码 2. 一致性检测</code></pre><p>md5的python实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">obj = md5()</span><br><span class="line">obj.update(<span class="string">&quot;alex&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="comment"># obj.update(&quot;wusir&quot;.encode(&#x27;utf-8&#x27;))  # 可以添加多个被加密的内容</span></span><br><span class="line"></span><br><span class="line">bs = obj.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(bs)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/flechazo_star/images/raw/master/1.png"></p><p>我们把密文丢到网页里. 发现有些网站可以直接解密. 但其实不然. 这里并不是直接解密MD5. 而是”撞库”. </p><p>就是它网站里存储了大量的MD5的值. 就像这样:</p><p><img src="https://gitee.com/flechazo_star/images/raw/master/2.png"></p><p>而需要进行查询的时候. 只需要一条select语句就可以查询到了. 这就是传说中的撞库. </p><p>如何避免撞库: md5在进行计算的时候可以加盐. 加盐之后. 就很难撞库了. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">salt = <span class="string">&quot;我是盐.把我加进去就没人能破解了&quot;</span></span><br><span class="line">obj = md5(salt.encode(<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 加盐</span></span><br><span class="line">obj.update(<span class="string">&quot;alex&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">bs = obj.hexdigest()</span><br><span class="line"><span class="built_in">print</span>(bs)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/flechazo_star/images/raw/master/3.png"></p><p>扩展; sha256</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1, sha256</span><br><span class="line">sha = sha256(<span class="string">b&#x27;salt&#x27;</span>)</span><br><span class="line">sha.update(<span class="string">b&#x27;alex&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(sha.hexdigest())</span><br></pre></td></tr></table></figure><p>不论是sha1, sha256, md5都属于摘要算法. 都是在计算hash值. 只是散列的程度不同而已. 这种算法有一个特性. 他们是散列. 不是加密. 而且, 由于hash算法是不可逆的, 所以不存在解密的逻辑.</p><h2 id="二-URLEncode和Base64"><a href="#二-URLEncode和Base64" class="headerlink" title="二. URLEncode和Base64"></a>二. URLEncode和Base64</h2><p>在我们访问一个url的时候总能看到这样的一种url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.sogou.com/web?query=%E5%90%83%E9%A5%AD%E7%9D%A1%E8%A7%89%E6%89%93%E8%B1%86%E8%B1%86&amp;_asf=www.sogou.com&amp;_ast=&amp;w=01019900&amp;p=40040100&amp;ie=utf8&amp;from=index-nologin&amp;s_from=index&amp;sut=3119&amp;sst0=1630994614300&amp;lkt=0%2C0%2C0&amp;sugsuv=1606978591882752&amp;sugtime=1630994614300</span><br></pre></td></tr></table></figure><p>此时会发现, 在浏览器上明明是能看到中文的. 但是一旦复制出来. 或者在抓包工具里看到的. 都是这种%. 那么这个%是什么鬼? 也是加密么?</p><p>非也, 其实我们在访问一个url的时候. 浏览器会自动的进行urlencode操作. 会对我们请求的url进行编码. 这种编码规则被称为百分号编码. 是专门为url(统一资源定位符)准备的一套编码规则.</p><p>一个url的完整组成: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scheme://host:port/<span class="built_in">dir</span>/file?p1=v1&amp;p2=v2<span class="comment">#anchor</span></span><br><span class="line">http  ://www.baidu.com/tieba/index.html?name=alex&amp;age=<span class="number">18</span></span><br><span class="line">    参数: key=value</span><br><span class="line">    服务器可以通过key拿value</span><br></pre></td></tr></table></figure><p>此时. 如果参数中出现一些特殊符号. 比如’&#x3D;’ 我想给服务器传递a&#x3D;b&#x3D;c这样的参数. 必然会让整个URL产生歧义. </p><p>所以, 把url中的参数部分转化成字节. 每字节的再转化成2个16进制的数字. 前面补%. </p><p>看着很复杂. 在python里. 直接一步到位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode, unquote, quote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独编码字符串</span></span><br><span class="line">wq = <span class="string">&quot;米饭怎么吃&quot;</span></span><br><span class="line"><span class="built_in">print</span>(quote(wq))  <span class="comment"># %E7%B1%B3%E9%A5%AD%E6%80%8E%E4%B9%88%E5%90%83</span></span><br><span class="line"><span class="built_in">print</span>(quote(wq, encoding=<span class="string">&quot;gbk&quot;</span>)) <span class="comment"># %C3%D7%B7%B9%D4%F5%C3%B4%B3%D4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个数据统一进行编码</span></span><br><span class="line">dic = &#123;</span><br><span class="line">    <span class="string">&quot;wq&quot;</span>: <span class="string">&quot;米饭怎么吃&quot;</span>,</span><br><span class="line">    <span class="string">&quot;new_wq&quot;</span>: <span class="string">&quot;想怎么吃就怎么吃&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(urlencode(dic))  <span class="comment"># wq=%E7%B1%B3%E9%A5%AD%E6%80%8E%E4%B9%88%E5%90%83&amp;new_wq=%E6%83%B3%E6%80%8E%E4%B9%88%E5%90%83%E5%B0%B1%E6%80%8E%E4%B9%88%E5%90%83</span></span><br><span class="line"><span class="built_in">print</span>(urlencode(dic, encoding=<span class="string">&quot;utf-8&quot;</span>))  <span class="comment"># 也可以指定字符集</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个完整的url编码过程</span></span><br><span class="line">base_url = <span class="string">&quot;http://www.baidu.com/s?&quot;</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;wd&quot;</span>: <span class="string">&quot;大王&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = base_url + urlencode(params)</span><br><span class="line"><span class="built_in">print</span>(url)  <span class="comment"># http://www.baidu.com/s?wd=%E5%A4%A7%E7%8E%8B</span></span><br></pre></td></tr></table></figure><p>解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&quot;http://www.baidu.com/s?wd=%E5%A4%A7%E7%8E%8B&quot;</span></span><br><span class="line"><span class="built_in">print</span>(unquote(s))  <span class="comment"># http://www.baidu.com/s?wd=大王</span></span><br></pre></td></tr></table></figure><p>base64其实很容易理解. 通常被加密后的内容是字节. 而我们的密文是用来传输的(不传输谁加密啊). 但是, 在http协议里想要传输字节是很麻烦的一个事儿. 相对应的. 如果传递的是字符串就好控制的多. 此时base64就应运而生了. 26个大写字母+26个小写字母+10个数字+2个特殊符号(+和&#x2F;)组成了一组类似64进制的计算逻辑. 这就是base64了.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">bs = <span class="string">&quot;我要吃饭&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># 把字节转化成b64</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(bs).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把b64字符串转化成字节</span></span><br><span class="line">s = <span class="string">&quot;5oiR6KaB5ZCD6aWt&quot;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(s).decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><p>注意, b64处理后的字符串长度. 一定是4的倍数. 如果在网页上看到有些密文的b64长度不是4的倍数. 会报错</p><p>例如, </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;ztKwrsTj0b0&quot;</span></span><br><span class="line">bb = base64.b64decode(s)</span><br><span class="line"><span class="built_in">print</span>(bb)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">此时运行出现以下问题</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;D:/PycharmProjects/rrrr.py&quot;</span>, line <span class="number">33</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    bb = base64.b64decode(s)</span><br><span class="line">  File <span class="string">&quot;D:\Python38\lib\base64.py&quot;</span>, line <span class="number">87</span>, <span class="keyword">in</span> b64decode</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_base64(s)</span><br><span class="line">binascii.Error: Incorrect padding</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决思路. base64长度要求. 字符串长度必须是4的倍数. 填充一下即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;ztKwrsTj0b0&quot;</span></span><br><span class="line">s += (<span class="string">&quot;=&quot;</span> * (<span class="number">4</span> - <span class="built_in">len</span>(s) % <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;填充后&quot;</span>, s)</span><br><span class="line">bb = base64.b64decode(s).decode(<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(bb)</span><br></pre></td></tr></table></figure><h2 id="三-对称加密"><a href="#三-对称加密" class="headerlink" title="三. 对称加密"></a>三. 对称加密</h2><p>​所谓对称加密就是加密和解密用的是同一个秘钥. 就好比. 我要给你邮寄一个箱子. 上面怼上锁. 提前我把钥匙给了你一把, 我一把. 那么我在邮寄之前就可以把箱子锁上. 然后快递到你那里. 你用相同的钥匙就可以打开这个箱子. </p><p>条件: 加密和解密用的是同一个秘钥. 那么两边就必须同时拥有钥匙才可以. </p><p>常见的对称加密: AES, DES, 3DES. 我们这里讨论AES和DES</p><h3 id="3-1-AES"><a href="#3-1-AES" class="headerlink" title="3.1 AES"></a>3.1 AES</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AES加密</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">长度</span></span><br><span class="line"><span class="string">    16: *AES-128*</span></span><br><span class="line"><span class="string">    24: *AES-192*</span></span><br><span class="line"><span class="string">    32: *AES-256*</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">MODE 加密模式. </span></span><br><span class="line"><span class="string">    常见的ECB, CBC</span></span><br><span class="line"><span class="string">    以下内容来自互联网~~</span></span><br><span class="line"><span class="string">    ECB：是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。</span></span><br><span class="line"><span class="string">    CBC：是一种循环模式，前一个分组的密文和当前分组的明文异或或操作后再加密，这样做的目的是增强破解难度。</span></span><br><span class="line"><span class="string">    CFB/OFB：实际上是一种反馈模式，目的也是增强破解的难度。</span></span><br><span class="line"><span class="string">    FCB和CBC的加密结果是不一样的，两者的模式不同，而且CBC会在第一个密码块运算时加入一个初始化向量。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">aes = AES.new(<span class="string">b&quot;alexissbalexissb&quot;</span>, mode=AES.MODE_CBC, IV=<span class="string">b&quot;0102030405060708&quot;</span>)</span><br><span class="line">data = <span class="string">&quot;我吃饭了&quot;</span></span><br><span class="line">data_bs = data.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># 需要加密的数据必须是16的倍数</span></span><br><span class="line"><span class="comment"># 填充规则: 缺少数据量的个数 * chr(缺少数据量个数)</span></span><br><span class="line">pad_len = <span class="number">16</span> - <span class="built_in">len</span>(data_bs) % <span class="number">16</span></span><br><span class="line">data_bs += (pad_len * <span class="built_in">chr</span>(pad_len)).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">bs = aes.encrypt(data_bs)</span><br><span class="line"><span class="built_in">print</span>(bs)</span><br></pre></td></tr></table></figure><p>AES解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">aes = AES.new(<span class="string">b&quot;alexissbalexissb&quot;</span>, mode=AES.MODE_CBC, IV=<span class="string">b&quot;0102030405060708&quot;</span>)</span><br><span class="line"><span class="comment"># 密文</span></span><br><span class="line">bs = <span class="string">b&#x27;\xf6z\x0f;G\xdcB,\xccl\xf9\x17qS\x93\x0e&#x27;</span></span><br><span class="line">result = aes.decrypt(bs)  <span class="comment"># 解密</span></span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-DES"><a href="#3-2-DES" class="headerlink" title="3.2 DES"></a>3.2 DES</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DES加密解密</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line"><span class="comment"># key: 8个字节</span></span><br><span class="line">des = DES.new(<span class="string">b&quot;alexissb&quot;</span>, mode=DES.MODE_CBC, IV=<span class="string">b&quot;01020304&quot;</span>)</span><br><span class="line">data = <span class="string">&quot;我要吃饭&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="comment"># # 需要加密的数据必须是16的倍数</span></span><br><span class="line"><span class="comment"># # 填充规则: 缺少数据量的个数 * chr(缺少数据量个数)</span></span><br><span class="line">pad_len = <span class="number">8</span> - <span class="built_in">len</span>(data) % <span class="number">8</span></span><br><span class="line">data += (pad_len * <span class="built_in">chr</span>(pad_len)).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">bs = des.encrypt(data)</span><br><span class="line"><span class="built_in">print</span>(bs)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解密</span></span><br><span class="line">des = DES.new(key=<span class="string">b&#x27;alexissb&#x27;</span>, mode=DES.MODE_CBC, IV=<span class="string">b&quot;01020304&quot;</span>)</span><br><span class="line">data = <span class="string">b&#x27;6HX\xfa\xb2R\xa8\r\xa3\xed\xbd\x00\xdb&#125;\xb0\xb9&#x27;</span></span><br><span class="line">result = des.decrypt(data)</span><br><span class="line"><span class="built_in">print</span>(result.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="四-非对称加密"><a href="#四-非对称加密" class="headerlink" title="四.非对称加密"></a>四.非对称加密</h2><p>非对称加密. 加密和解密的秘钥不是同一个秘钥. 这里需要两把钥匙. 一个公钥, 一个私钥.  公钥发送给客户端. 发送端用公钥对数据进行加密. 再发送给接收端, 接收端使用私钥来对数据解密. 由于私钥只存放在接受端这边. 所以即使数据被截获了. 也是无法进行解密的. </p><p>常见的非对称加密算法: RSA, DSA等等, 我们就介绍一个. RSA加密, 也是最常见的一种加密方案</p><h3 id="4-1-RSA加密解密"><a href="#4-1-RSA加密解密" class="headerlink" title="4.1 RSA加密解密"></a>4.1 RSA加密解密</h3><h4 id="4-1-1-创建公钥和私钥"><a href="#4-1-1-创建公钥和私钥" class="headerlink" title="4.1.1 创建公钥和私钥"></a>4.1.1 创建公钥和私钥</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机</span></span><br><span class="line">gen_random = Random.new</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成秘钥</span></span><br><span class="line">rsakey = RSA.generate(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rsa.public.pem&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(rsakey.publickey().exportKey())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rsa.private.pem&quot;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(rsakey.exportKey())</span><br></pre></td></tr></table></figure><h4 id="4-1-2-加密"><a href="#4-1-2-加密" class="headerlink" title="4.1.2 加密"></a>4.1.2 加密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加密</span></span><br><span class="line">data = <span class="string">&quot;我要吃饭了&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rsa.public.pem&quot;</span>, mode=<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pk = f.read()</span><br><span class="line">    rsa_pk = RSA.importKey(pk)</span><br><span class="line">    rsa = PKCS1_v1_5.new(rsa_pk)</span><br><span class="line"></span><br><span class="line">    result = rsa.encrypt(data.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="comment"># 处理成b64方便传输</span></span><br><span class="line">    b64_result = base64.b64encode(result).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(b64_result)</span><br></pre></td></tr></table></figure><h4 id="4-1-3-解密"><a href="#4-1-3-解密" class="headerlink" title="4.1.3 解密"></a>4.1.3 解密</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;e/spTGg3roda+iqLK4e2bckNMSgXSNosOVLtWN+ArgaIDgYONPIU9i0rIeTj0ywwXnTIPU734EIoKRFQsLmPpJK4Htte+QlcgRFbuj/hCW1uWiB3mCbyU3ZHKo/Y9UjYMuMfk+H6m8OWHtr+tWjiinMNURQpxbsTiT/1cfifWo4=&quot;</span></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rsa.private.pem&quot;</span>, mode=<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    prikey = f.read()</span><br><span class="line">    rsa_pk = RSA.importKey(prikey)</span><br><span class="line">    rsa = PKCS1_v1_5.new(rsa_pk)</span><br><span class="line">    result = rsa.decrypt(base64.b64decode(data), gen_random)</span><br><span class="line">    <span class="built_in">print</span>(result.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="五-肝个案例看看"><a href="#五-肝个案例看看" class="headerlink" title="五. 肝个案例看看"></a>五. 肝个案例看看</h2><p>我们以<a href="https://www.endata.com.cn/BoxOffice/BO/Year/index.html%E4%B8%BA%E6%A1%88%E4%BE%8B">https://www.endata.com.cn/BoxOffice/BO/Year/index.html为案例</a>. 来完成该网站数据解密</p><p>分析: <img src="https://gitee.com/flechazo_star/images/raw/master/4.png"></p><p>接下来就是逆向的过程了… 各位..还是看视频吧. 视频里有详细的分析过程.<br><img src="https://gitee.com/flechazo_star/images/raw/master/5.png"><br><img src="https://gitee.com/flechazo_star/images/raw/master/6.png"><br><img src="https://gitee.com/flechazo_star/images/raw/master/7.png"></p><p>给出完整破解代码<img src="https://gitee.com/flechazo_star/images/raw/master/8.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii  <span class="comment"># 二进制和ascii之间转换</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a[c:]</span><br><span class="line">    d = a[:b] + a[b+c:]</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">data</span>):</span><br><span class="line">    e = <span class="built_in">int</span>(data[<span class="built_in">len</span>(data)-<span class="number">1</span>], base=<span class="number">16</span>) + <span class="number">9</span></span><br><span class="line">    f = <span class="built_in">int</span>(data[e], base=<span class="number">16</span>)</span><br><span class="line">    data = func(data, e, <span class="number">1</span>)</span><br><span class="line">    e = data[f:f+<span class="number">8</span>]</span><br><span class="line">    data = func(data, f, <span class="number">8</span>)</span><br><span class="line">    jiemi(data, <span class="built_in">str</span>(e), <span class="built_in">str</span>(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jiemi</span>(<span class="params">data, key, iv</span>):</span><br><span class="line"></span><br><span class="line">    des = DES.new(key.encode(<span class="string">&quot;utf-8&quot;</span>), mode=DES.MODE_ECB)</span><br><span class="line">    <span class="comment"># de_text = base64.standard_b64decode(data)</span></span><br><span class="line">    <span class="comment">#              十六进制表示的二进制数据 -&gt; 十六进制 -&gt; 二进制</span></span><br><span class="line">    <span class="built_in">print</span>(binascii.a2b_hex(data))</span><br><span class="line">    ee = des.decrypt(binascii.a2b_hex(data))</span><br><span class="line">    <span class="built_in">print</span>(ee.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    data = <span class="string">&quot;&quot;&quot;BB95CA71E232FD88B71C758B19BDDDCB2BCF1E7ACCDC3B8777E875407841A1CE202F0F0028269913ADDA6050FED043DC8656C0F9FB3364603D5FB9C3B361B750AA36C06FC5500480DC8B3A1E0A994600FC0CEF28AF89450FC46C6E078FF9D3AA063D0303BE4A7CC74A3C70516ACE9F8944D7540071DF7DE33DB23B02B5A76D6AF455117F429EA2926F52C76F69CB9317F644A93A80D43FDB778C5E5B619578CBA12D958DE67163EFA55E1DB4C28D3D541FB7A4C426E2B592399B08BD67A3A4A23A953620B07EA643D69E6C1E93E8FB1971F9B95F4A71201149F60EBF38B3B86C042D786710415370A8514FC981E85B5D3C5198ACB740232AB600EF42623AA67703D9E43755F11E8B8DB2B3F5BCF8E833CA1DE7C1FC5DE615B949F421A16077DC964E4080795A37CE998736638753D181CD5D4B09FCB28F1671837114A55BCEC34F3905E9266B17B8C0B1C958F7BC245F5360937F4C3FA97DA9396A4B94E16CFCFA6C190B7527EC4E5DAD68C7C2641FCFAA93064487EE495A3BA567747EA8B1A504B45C2D186A661A66A287790959BB63321C3EFC500A3EEE7C0B5488149D960235C8A1751E2F3995DF11689353FFB4F92EE1B2A9ED66D12AE8DDC8AAE8CC120BBA64D93AA7C041BB6B5B1F752386E3B26ED20CC564C9BA498BE1FE0EEC80DA48DEA7CD92A52EA4764B55FB2FDAB5CF4D680B3E428C5C002AD0A12EBD3BE329F063E0FBBF9BBEB76CAD8C9CD10E2FE25AD1A9BC341BDC9F790616A1920AA9990D582E153393CCAAF65F8F5669C843D469B7EC692F41B3CCFD3A98D63153E7BF96A8268D338787E888F530285B52183523122230AD9F175667CD5E27E0A231A3BE5A9C24A28674FC768A9BA2338C890189E9C2CA8E608AA2470288E6FEEC64BDB6D06AA5E10681A5111D5E1FEDADBD16F12DED12EE99E8FCA112B8EC1C9E3EA5435315A7D2D14A7B9BBF5137010AB2A95E66B8FFA1695ACD708488A5620E1F147BFD985BC8EA097C836EC412B8B816E3F5936A23D82056212DA93DFDA7F7F6FE588338CF96CAD0AABB217C4F1C8646E1EB9A277874B7DE1C756362596B949B87AA00E23E301C6DCBCDBE1C9454E0A227F80F08EA86BA75B06FB7FD817DB9AE2729A0034DDDE18A213E4682C37A326A0FEF977DCC96A035E126AC71C754574A4D8FE0FF093BC14E34069AAC4C32DAF11CD687FE5766681C2181EE9C98514BD7AF44D79C97183F0E8CF60618F9B99FBAE66B139C8A0FEAD488E947D92092B5A80908F38B2DD73DC19C19550CF589661B1D8160C3568B8616025047318F889531F9CABB7AACAC62E5EA16C3804CD168C67F019A48CB0910F1EE3A2460B84251DB754038DEFE707463CB65C1666DFB25937A0C4BE17872A2DDE2090EB5687D09CD51AAF652FBE33A240A3B1F28617701E6EF6E733914BB32B05D1C0649C4ECA69D3075830DA732ED54DBC1F6A687EB13AE7505AD33F363A98241A0D30FAC9EB41D4FD53153B9403A14B3F71DDD6065FF7477EEED35A7E0F3E1CE0D545564AD812752817D32E52E5B08694252A69F25100CCD275D6C38F8AA3933D4F3FED4B2760CA0367A4E3FC7A4F15295050135F46F03C79914ACFE571527EC4E5DAD68C7CD1661A0FC37A62FC5FD275EBC1499F8EEA8B1A504B45C2D1233CF886DB4DC387959BB63321C3EFC5ABE261E2D0FF0E1E49D960235C8A1751451E687EAEBB700564D50B0C195DE84DAB29B668B737EC7E459AC26FBC734F5D7444C19860D9015D64AA91ED197D825957C2338ED354BE34AEABACDB4C32BF3A592838630E4FF8EF4A26611780CDC0F1AB0239DBAD1978A7BFA1587473E68FE2EF89B1144E3B6A99712C80A8BE7AE349695B250FDE76A54375C166A8767D41D838EFB9CB504C23563EA9E8EC3D1E94BDEE0791A86F1B31E9C81F872D38EB7F3AAC2593FF32DFCAECE1AC88882ED99F52F6466B2F437236C3241D0CACB5BBDC801AC086E0B2C0B87CE8158C0830A834ACF18EED58E6FA8B0E3DDA66031DFE0EC3C28A5F8D9CD9CD3A27EBE2F1F054A4EC9A108F283A0EC6698B66C2B05D1820D6ACCF5CB326100BDE4AD2D6221A818378DD1A18DAFCED301A9A39B85216D0370A047B1714A115A1E08A44217EE0A74AC18550D15370350F125734177A12B0BF26D079490D3A554232A1C738006CEBADCD6568A8D75801DD6D90BF6C2D8620033A98E1F9B93B9DFDA7BCE69DAB9AB241402929475CEAF6A8159CB1665965CE332E769D44CBEDF6C2902BE7755BBFEC2AD16669799D723493F8D4F8160E0507FBFABE103381917445735209BDEF1B373DBF5B9003947C952DC4150CE58CA6A08C112946C3A0684250C92F9727B92ED109394D4DB572F2324E01AE7D448A841D256D83360C70027E90F3EFF227D949E50B9F3C44141F66FDBE0413B43CF26912BEA8190633B2256927123E4E0CA56BADE27CF6A452AEBC574ED2CF00ADAC31534ECB8B8F7583E26126294025CFDA81D9B51453D2DEE57E0DAA501CE77328A5A3DE42966204659481C827CD0AD28EB502E0AF1DDC018155FD23CD6B34E395D1DC1492ED15DCCF4F2E9D5787B1A9CA775BA0AABFCAE959E9CE343BE15B3868761E6AC670E745C47A3CA77C8010CE5DF12FBA1FF47D1F3111502835E520BF1D4D07F7C589D6DBAEBBC5C3CA6BDE40A910A8FD98F1CDB7C1032DB93A4A4603950D9B2BC2EDB301F3B8A3733803B0363696805FA0C890189E9C2CA8E608AA2470288E6FEEC64BDB6D06AA5E10B9960959DB04E0FC6B4AE42919E6362D9E8FCA112B8EC1C9E3EA5435315A7D2D41F74C4DC73C4C32AB2A95E66B8FFA1677B8260867324907A601F44EB2F37C7BCF00ADAC31534ECB8B8F7583E26126294025CFDA81D9B514E24A4786C16FAE911CE77328A5A3DE42966204659481C827CD0AD28EB502E0AF1DDC018155FD23CD6B34E395D1DC1492ED15DCCF4F2E9D57017B8E2FD4ACA194414AC4306FFDDD0ECBAEEBD0DD9BEE40672653571AB681E1DD4BB5C3895A3AD65890B8F97FBF9C88E520BF1D4D07F7C589D6DBAEBBC5C3CA0AA59350F5B06A9CF1CDB7C1032DB93A600F905CAFDCC89426064368226E0398DA90A11148933932FBAE66B139C8A0FE40A1074779B3381A5A80908F38B2DD73A95E97608666FC205A5816B287D14A95616025047318F88974AB0F6F328BA18C2E5EA16C3804CD16649D903C38FF661E0F1EE3A2460B84251DB754038DEFE707463CB65C1666DFB25937A0C4BE17872A4D4793FB5D321EA59CD51AAF652FBE33A240A3B1F28617701E6EF6E733914BB32B05D1C0649C4ECA69D3075830DA732ED54DBC1F6A687EB113EF467AD942DE82433568E6C35F7F8E69C80EBCE3D0525690FE7F11E65866B52618E95AFC9AEAA6AC154CFAE9BAE61312752817D32E52E55B34B1FF2C048783FF73DCB5363871110B3326011985285A42FD2256723731435B9789386DF396F4B7E907756E3EB3BA14D41724B9938BE3E08E5416A728F2A1D9AD54738DA5F74F8CE3A2504A481D81616025047318F889FF5C244FEF7A458AAEC30C56BF88A048AB2A95E66B8FFA1677B8260867324907E1F147BFD985BC8EA097C836EC412B8B816E3F5936A23D825DB7BDA9B61D75577F6FE588338CF96CAD0AABB217C4F1C8646E1EB9A277874B7DE1C756362596B949B87AA00E23E3015D490874901DE069CC9E784D7C8167F87E9705A623E1DC9E4506DE4DE279B83475D14D9CD01A927321BFB61307DBAB51035E126AC71C754574A4D8FE0FF093BCDA0F829386AA0119AF11CD687FE576661F4C9E198A9BF44453B9BCD8DDF4F9DFAF4CD6FADF2A0EFDFBAE66B139C8A0FEB5298E04873FAF465A80908F38B2DD7346A3AB0F1D88AE6A3C7E4B72445DF2059E8FCA112B8EC1C991F981BCD6E9013914283CA7809B0D10AB2A95E66B8FFA1677B8260867324907E1F147BFD985BC8EA097C836EC412B8B816E3F5936A23D82242CAC4E1D58DFB67F6FE588338CF96CAD0AABB217C4F1C8646E1EB9A277874B7DE1C756362596B949B87AA00E23E3015D490874901DE0696DFA53B227EFCFEFDD39AE8E57EB577B9176ED83D6431466D9F3E9DB9C0C28549CBDCBF30D9D2825035E126AC71C754574A4D8FE0FF093BCCCEFCB727BA620B2AF11CD687FE57666F3633A86CF7124A5E782C0A0236A3B4AAE8E269FE0E302F8FBAE66B139C8A0FEAD488E947D92092B5A80908F38B2DD73633125B1DBA8CA0390DFF227F8D5F0D4270F87A346DD8D7777F104C4E22319AB41F74C4DC73C4C32AB2A95E66B8FFA1677B8260867324907E1F147BFD985BC8EA097C836EC412B8B816E3F5936A23D82ED937131BC18FCAF7F6FE588338CF96CAD0AABB217C4F1C8646E1EB9A277874B7DE1C756362596B949B87AA00E23E3015D490874901DE069AC018A4AF210397DEC31572E1772A5DE68760C413C81BC650E3A2546AAE47214A0723D94F61CDFB6035E126AC71C754574A4D8FE0FF093BC3CE90A942BC9A267AF11CD687FE57666F8AA317690E44ED5F1F5535D6515E747EE0A07D93CEB4AF2B7E907756E3EB3BA17664C4C9DEFDE32A7056D8B191D39B37EBDC765807597018950115302DD3A9B616025047318F889D00A2A799AA39A690A256C4D657A2CB7AB2A95E66B8FFA1677B8260867324907E1F147BFD985BC8EA097C836EC412B8BEDF7348D88FA841C4DBCF56EA2F0D9037F6FE588338CF96CAD0AABB217C4F1C8646E1EB9A277874B7DE1C756362596B949B87AA00E23E3015D490874901DE069925BBE4AABDDC6D5B1C4CE3F72F804EF9BF7363B37B6F6D8577AAFD3D9FB3D2786D6B026B51B877A035E126AC71C754574A4D8FE0FF093BCF07C1B608B727A0CAF11CD687FE57666E1E117A1853A9FB55DF08E0D036D7D917A70F27FFD1D2239E8158C0830A834AC70FA36D3655C5BBE9BF05D89E933E74BC28A5F8D9CD9CD3A65DE8659196B73AF959BB63321C3EFC5ABE261E2D0FF0E1E49D960235C8A1751451E687EAEBB7005730CE729EB0318CAAB29B668B737EC7E459AC26FBC734F5DBE252FF94BDA41E675192671BFA50C0857C2338ED354BE34AEABACDB4C32BF3A592838630E4FF8EF4A26611780CDC0F1AB0239DBAD1978A7BFA1587473E68FE234BC03311BE64FDD8D16CB98901ACA1CF18367A85B5C7EE32D4E08C530A378B48687343D377740591410021C7FECFB1EEE0791A86F1B31E920E6CE797374C688E4046D6659B5E7BBE1AC88882ED99F523390FB264826B70FFCECC22A8B51BEAAD5C7DB122168126B2F9727B92ED10939E1ED793B9BDCCCFB125285EA628230F583360C70027E90F3894262EC2FDBF79B9A108F283A0EC669E4418550BB47F7E5ACCF5CB326100BDE6B26049D936BE2CC3FFB4F92EE1B2A9ED66D12AE8DDC8AAE8CC120BBA64D93AA7C041BB6B5B1F75292BBAC28FEDD8FED4C9BA498BE1FE0EEC80DA48DEA7CD92A52EA4764B55FB2FDAB5CF4D680B3E428C5C002AD0A12EBD3BE329F063E0FBBF988D38205D195E158B41152D0A44EF17D2DD62B7E16212818EC0BAD6C5663DD1404D9C33BCB15712659E45B7EB74488D71B3CCFD3A98D6315A8816B73919ACD39100AC0519A6E42F22183523122230AD984CBBC8A33A398F0D4038C5799D60BB374E859046B362BA3EF84BB56F1426FB38A4BB1B673C1CD4A12A420C6EDFE64492A170AA4626ACA1490D5A3802BB6C5D8A64F836F68F8CECC2B072969E237DB1E0D43FDB778C5E5B639806A514B4665F667163EFA55E1DB4C28D3D541FB7A4C426E2B592399B08BD67A3A4A23A953620B07EA643D69E6C1E93E8FB1971F9B95F4A71201149F60EBF38B3B86C042D786710415370A8514FC981E85B5D3C5198ACB740232AB600EF42623AA67703D9E43753A2FEF37ADE3045C6C07652F260125EA7CD253EA717EE222E8A6AE60FF02A6A29C10AC9D0F134D52753D181CD5D4B09FCB28F1671837114AE8FD05DDB01347D966B17B8C0B1C958FCE712FF5C4F39582EF84BB56F1426FB38A4BB1B673C1CD4A5905CCDF47FB190C2A170AA4626ACA1459901C16526A7DB16DDC02368BA29D342629FE793C9285D30D43FDB778C5E5B6263F20252F7EAE10F6A452AEBC574ED2CF00ADAC31534ECB8B8F7583E26126294025CFDA81D9B514033E1DA16E0D6E2EDAD574660443C7B9966204659481C827CD0AD28EB502E0AF1DDC018155FD23CD6B34E395D1DC1492ED15DCCF4F2E9D5787B1A9CA775BA0AA301F074A41B09C10F499115961E8BCBA2E4C2BCD5E02C1AFB278FAAD8A5C1B8F378F43386163FFF6E520BF1D4D07F7C589D6DBAEBBC5C3CA58F4666BE22C60CBF1CDB7C1032DB93A68D5FD9E0242B2AAC4AE55BF4518A9094FA25D978F37D88698C3646292167449B7E907756E3EB3BAABAD6BCC780E4D722EF8636B8207C789BE65F9F20C180B36560EFDC6845569CA616025047318F889B5627A35D6ADA7552E5EA16C3804CD16FF3CBBE1641ED1060F1EE3A2460B84251DB754038DEFE707463CB65C1666DFB25937A0C4BE17872A4D4793FB5D321EA59CD51AAF652FBE33A240A3B1F28617701E6EF6E733914BB32B05D1C0649C4ECA69D3075830DA732ED54DBC1F6A687EB113EF467AD942DE82433568E6C35F7F8E34DB487999A43722A42612F9C87B74E86F4C225322A6B95F5FA8DBAFEC6A86FA12752817D32E52E526A256CAE0BDF92C489A3C26DF4611660B3326011985285AD85AEFD6FDFB3CF014BB6EACD809D727E8158C0830A834ACF18EED58E6FA8B0E3DDA66031DFE0EC3C28A5F8D9CD9CD3A8A6A2F55AC3BAC2B959BB63321C3EFC5D7DBBCEDAB91121F49D960235C8A1751451E687EAEBB7005730CE729EB0318CAAB29B668B737EC7E459AC26FBC734F5D7444C19860D9015DC9BE46BA8C7AA43757C2338ED354BE34AEABACDB4C32BF3A592838630E4FF8EF4A26611780CDC0F1AB0239DBAD1978A7BFA1587473E68FE29D9822CEEBA91EB0232F1980678945BEB80F1813FBCCC379C0575B46E785F9C887830B3F723381B9B30515FC666EB8DBEE0791A86F1B31E940EA8BBAA6A33A3C1B5DDC9FB5F858DFE1AC88882ED99F52732E823ABD0B99266196CF3C68AEB770527EC4E5DAD68C7C8A0DBC920C874289DE5AB4E2D55D4804EA8B1A504B45C2D1A4E0A78E4F53A9BBEBB7602D39E849606B948890C7374840DDAC9159048DF564649D903C38FF661E0F1EE3A2460B84251DB754038DEFE707463CB65C1666DFB25937A0C4BE17872A1812F285E1956F769CD51AAF652FBE33A240A3B1F28617701E6EF6E733914BB32B05D1C0649C4ECA69D3075830DA732ED54DBC1F6A687EB13AE7505AD33F363AF7F3C0B0F2BF265A576BA40BC1FF1F1C5E4031404E60275802625CFB9A91F08C3E1CE0D545564AD812752817D32E52E57890E43643956C90FF73DCB5363871117929489C3A49D2D69636606C0DE4CBE0EF84BB56F1426FB38A4BB1B673C1CD4A150A5AC4F5C91398F045BE8E4E7FF45C1DF7DE33DB23B02BDB684E633911D9143C44141F66FDBE0485325C6E1516D547190633B225692712EAAD58F14667BB31AB19346E5E7CB67A2C89DC7AF56F53B5047B1714A115A1E08A44217EE0A74AC1D4CC67E203D866CD5734177A12B0BF26D079490D3A554232A1C738006CEBADCD6568A8D75801DD6D90BF6C2D8620033A98E1F9B93B9DFDA7BCE69DAB9AB24140D712C263959F3D86F9C82368F6F563DFA4AA1A75046DEB07C93B9FC3258E0F733B1B0DDFD60DECBDD4F8160E0507FBFABE1033819174457387C72C91CC1FC9FB5B9003947C952DC4A97202EF1F394DC78B1913BB7F73668B9AF5A21903708BB0FF9D3AA063D0303B10DBACD99CE24DE49A795002212705C51DF7DE33DB23B02B95F0FE9899782C0C3C44141F66FDBE04E5FE403075DAF970190633B2256927120AD527349FD5BE3EDD1A18DAFCED301A9A39B85216D0370A047B1714A115A1E08A44217EE0A74AC176B2205F658155AA5734177A12B0BF26D079490D3A554232A1C738006CEBADCD6568A8D75801DD6D90BF6C2D8620033A98E1F9B93B9DFDA7BCE69DAB9AB241404FFFE180CA04A1CA1D5799E281A0D976F5F87CDC93940A3793CDD54147241E24A6ECD683DD48F6CED4F8160E0507FBFA59685C3E9FE5919931FB5C1F26DE2EF65B9003947C952DC42B4B52B1E1422177E6367AD9F82A5B842F9727B92ED10939E1ED793B9BDCCCFBA285FDAF205A97C883360C70027E90F3E0AD10D8E244C5859A108F283A0EC6692300CA78EFB1C810ACCF5CB326100BDE7B7572132E8DD6EA8588DBEB2A9915DBC2956D781AF560F28CC120BBA64D93AA7C041BB6B5B1F7526670F160CA7248AA4C9BA498BE1FE0EEC80DA48DEA7CD92A52EA4764B55FB2FDAB5CF4D680B3E428C5C002AD0A12EBD3BE329F063E0FBBF988D38205D195E158A51161601072E7BA6A7BF4BC01A6AB1599A59972BAA5DB345C7E6F624CC7A91F873188C48AFE02DE1B3CCFD3A98D6315F948D1D944E2EC7B5D3519A652388EC32183523122230AD93EAE96299EFE09E550E11D244658141DA4AE42E98DFAB55B0CE49AECE56C95AEB7E907756E3EB3BAABAD6BCC780E4D722EF8636B8207C789F5CF931C25657252CD0B80599D612B38616025047318F889EAF442FB833A0DE4D8FABE15A561310AAB2A95E66B8FFA162AD4D9A4CA339BC004D421F162767523A097C836EC412B8B816E3F5936A23D8235FE44809B75EFA57F6FE588338CF96CAD0AABB217C4F1C8646E1EB9A277874B7DE1C756362596B949B87AA00E23E3015D490874901DE06900B47779801159ED09DAA66235343ED7E62F9F2105AB5E75A53CBE5B02CC27A359B1B7273C79375A035E126AC71C754574A4D8FE0FF093BCC69CBC4ACA3FE291AF11CD687FE57666D2135483AAC3969BB68E075C73055510FF9D3AA063D0303BE4A7CC74A3C70516CB8FD925E00C28A21DF7DE33DB23B02BE430FEAEE9D5BE853C44141F66FDBE04826FA7F6BAA451BD190633B22569271216F372A5CAC4C59AF6A452AEBC574ED2CF00ADAC31534ECB8B8F7583E26126294025CFDA81D9B5141C691927E798BE3DE10CE475A92E59EF966204659481C827CD0AD28EB502E0AF1DDC018155FD23CD6B34E395D1DC1492ED15DCCF4F2E9D5787B1A9CA775BA0AA2796E63311615D51EB98E4DA5BDD38E1126CF3D39CA1C6D999110275DACABA9E8220DC566AE0AEF5773B9E0DE18A163ED833C30B73D5FE1FF3A78353E3239B7DD03434631610158B&quot;&quot;&quot;</span></span><br><span class="line">    process(data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring静态代理</title>
      <link href="/2023/05/22/Spring%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2023/05/22/Spring%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring静态代理"><a href="#Spring静态代理" class="headerlink" title="Spring静态代理"></a>Spring静态代理</h2><blockquote><p>真实对象和代理对象都要实现同一个接口</p><p>代理对象要代理真实角色</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">interface Marry&#123;</span><br><span class="line">    public void HappyMarry();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class You implements Marry&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void HappyMarry() &#123;</span><br><span class="line">        System.out.println(&quot;我结婚了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class StaticProxy implements Marry&#123;</span><br><span class="line">    private Marry marry;</span><br><span class="line"></span><br><span class="line">    public StaticProxy(Marry marry)&#123;</span><br><span class="line">        this.marry = marry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void HappyMarry() &#123;</span><br><span class="line">        before();</span><br><span class="line">        this.marry.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void after() &#123;</span><br><span class="line">        System.out.println(&quot;婚后。&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void before() &#123;</span><br><span class="line">        System.out.println(&quot;婚前准备&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class start &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        StaticProxy staticProxy = new StaticProxy(new You());</span><br><span class="line">        staticProxy.HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><ul><li>任何接口 ，如果只包含唯一一个抽象方法，那么他就是函数式接口</li><li>函数式接口可以使用lambda表达式</li></ul><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p>创建状态–&gt; 就绪状态–&gt;阻塞状态–&gt;运行状态–&gt;死亡状态</p><h3 id="线程停止"><a href="#线程停止" class="headerlink" title="线程停止"></a>线程停止</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">1、建议线程正常停止--&gt;利用次数，不建议死循环</span><br><span class="line">2、建议使用标志位--&gt;设置一个标志位</span><br><span class="line">3、不要使用stop或者destory等过时或者JDK不建议使用得方法</span><br><span class="line">Copy</span><br><span class="line">//当主线程到5000次时  设置停止</span><br><span class="line">public class testStop implements Runnable &#123;</span><br><span class="line">    private boolean flag = true;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        while(flag)&#123;</span><br><span class="line">            System.out.println(&quot;run...Thread &quot;+i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void stop()&#123;</span><br><span class="line">        this.flag = false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        testStop testStop = new testStop();</span><br><span class="line">        new Thread(testStop).start();</span><br><span class="line">        for (int i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">            System.out.println(&quot;主线程正在执行第&quot;+i+&quot;次&quot;);</span><br><span class="line">            if (i==5000) &#123;</span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(&quot;线程该停止了&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><ul><li>sleep(时间)指定当前线程阻塞的毫秒数</li><li>sleep 存在异常InterruptedException;</li><li>sleep时间打到后线程进入就绪状态；</li><li>sleep 可以模拟网络延迟，倒计时等；</li><li>每一个对象都有锁 ，sleep 不会释放锁；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//倒计时实现  10-0 </span><br><span class="line">public class testSleep &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        tenDown();</span><br><span class="line">    &#125;</span><br><span class="line">    public static void tenDown() throws InterruptedException &#123;</span><br><span class="line">        int num = 10;</span><br><span class="line">        while(num &gt;=0 )&#123;</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><blockquote><p>小记 时间格式化（格式化当前系统时间）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date(System.currentTimeMillis()))</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></blockquote><h3 id="线程礼让（yield）"><a href="#线程礼让（yield）" class="headerlink" title="线程礼让（yield）"></a>线程礼让（yield）</h3><ul><li>礼让进程，让当前执行的线程停止，但不阻塞</li><li>将线程从运行状态转为就绪状态</li><li>让cpu重新调度，礼让不一定成功，看cpu心情</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class testYield &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyYield myYield = new MyYield();</span><br><span class="line">        new Thread(myYield,&quot;线程1&quot;).start();</span><br><span class="line">        new Thread(myYield,&quot;线程2&quot;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyYield implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+&quot;线程开始执行&quot;);</span><br><span class="line">        Thread.yield();//线程礼让</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+&quot;线程停止执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br><span class="line">//执行结果如下 则是礼让失败的状况</span><br><span class="line"></span><br><span class="line">线程1线程开始执行</span><br><span class="line">线程1线程停止执行</span><br><span class="line">线程2线程开始执行</span><br><span class="line">线程2线程停止执行</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h2 id="线程Join-（插队）"><a href="#线程Join-（插队）" class="headerlink" title="线程Join （插队）"></a>线程Join （插队）</h2><ul><li>Join 合并线程，等待此线程执行完成后，再执行其他线程，其他线程阻塞</li><li>可以想象成插队</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//测试join方法  //想像为插队</span><br><span class="line">//当i&lt;200 时   main线程与新线程抢夺cpu交替执行   当i=200 时 执行</span><br><span class="line">//join操作  mian线程等待join线程执行完毕后继续执行 </span><br><span class="line">public class testJoin implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            System.out.println(&quot;我来插队了&quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        testJoin testJoin = new testJoin();</span><br><span class="line">        Thread thread = new Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line">        for (int i = 0; i &lt; 500; i++) &#123;</span><br><span class="line">            System.out.println(&quot;main 线程&quot;+ i);</span><br><span class="line">            if (i==200)&#123;</span><br><span class="line">                thread.join();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h2 id="观测线程状态"><a href="#观测线程状态" class="headerlink" title="观测线程状态"></a>观测线程状态</h2><ul><li><p>Thread.State</p><ul><li><p>NEW</p><p>尚未启动的线程处于此状态</p></li><li><p>RUNNABLE</p><p>在Java虚拟机中执行的线程处于此状态</p></li><li><p>BLOCKED</p><p>被组测等待监视器锁定的线程处于此状态</p></li><li><p>WAITING</p><p>正在等待另一个线程执行特定东站的线程处于此状态</p></li><li><p>TIMED_WAITING</p><p>正在等待另一个线程执行动作打到指定等待时间的线程处于此状态</p></li><li><p>TERMINATED</p><p>已退出的线程处于此状态</p></li></ul></li><li><p>死亡之后的线程不能重新启动</p></li></ul><h2 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h2><ul><li>Java 提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行</li><li>线程优先级用数字表示，范围从1~10 (超出范围会报错)<ul><li>Thread.MIN_PRIORITY &#x3D; 1 (优先级最低)</li><li>Thread.MAX_PRIORITY &#x3D; 10 （优先级最高）</li><li>Thread.NORM_PRIORITY &#x3D; 5 （默认优先级）</li></ul></li><li>使用一下方式改变活获取优先级<ul><li>getPriority() setPriority(int xxx)</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">public class testPriority&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //主线程优先级</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+Thread.currentThread().getPriority());</span><br><span class="line">        Mypriority mypriority = new Mypriority();</span><br><span class="line">        Thread thread1 = new Thread(mypriority);</span><br><span class="line">        Thread thread2 = new Thread(mypriority);</span><br><span class="line">        Thread thread3 = new Thread(mypriority);</span><br><span class="line">        Thread thread4 = new Thread(mypriority);</span><br><span class="line">        Thread thread5 = new Thread(mypriority);</span><br><span class="line">        Thread thread6 = new Thread(mypriority);</span><br><span class="line">        Thread thread7 = new Thread(mypriority);</span><br><span class="line"></span><br><span class="line">        thread1.setPriority(1);</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        thread2.setPriority(2);</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">        thread3.setPriority(3);</span><br><span class="line">        thread3.start();</span><br><span class="line"></span><br><span class="line">        thread4.setPriority(4);</span><br><span class="line">        thread4.start();</span><br><span class="line"></span><br><span class="line">        thread5.setPriority(5);</span><br><span class="line">        thread5.start();</span><br><span class="line"></span><br><span class="line">        thread6.setPriority(6);</span><br><span class="line">        thread6.start();</span><br><span class="line"></span><br><span class="line">        thread7.setPriority(10);</span><br><span class="line">        thread7.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Mypriority implements Runnable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+&quot;----&gt;&quot;+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h2 id="守护线程（daemon）"><a href="#守护线程（daemon）" class="headerlink" title="守护线程（daemon）"></a>守护线程（daemon）</h2><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕</li><li>虚拟机不用等待守护线程执行完毕</li><li>如 后台记录操作日志，监控内存，垃圾回收等</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class testDeamon &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        God god = new God();</span><br><span class="line">        Thread thread = new Thread(god);</span><br><span class="line">        //线程启动前  设置线程为守护线程  当主线程结束时  守护线程随之结束 </span><br><span class="line">        //除设置为守护线程外  其余为正常线程  主线程</span><br><span class="line">        thread.setDaemon(true);  </span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        You you = new You();</span><br><span class="line">        Thread thread1 = new Thread(you);</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class God implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            System.out.println(&quot;I&#x27;m God ,so ..我永生&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class You implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            System.out.println(&quot;我还活着&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;I&#x27;m die&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>当多个线程操作同一个资源</p><ul><li>由于同意进程的多个线程共享同一块存储空间。再带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入锁机制（synchronized）,当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可 存在一下问题<ul><li>一个线程持有锁会导致其他所有需要此锁的线程挂起</li><li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题</li></ul></li></ul><h2 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h2><ul><li><p>产生死锁的必要条件：</p><ul><li>互斥条件：一个资源每次只能呗一个进程使用</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不妨</li><li>不剥夺条件：进程已获得资源，在未使用完之前，不能强行剥夺</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系</li></ul><blockquote><p>上面列出死锁的四个必要条件，我们只要想办法破其中的任意一个或多个条件就可以避免死锁发生</p></blockquote></li></ul><h2 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h2><ul><li>Lock是显示锁（手动开启和关闭锁，别忘了关闭锁）Synchronized 是隐式锁，出了作用域自动释放</li><li>Lock只有代码块锁，synchronized 有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多子类）</li><li>优先使用顺序：<ul><li>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方法体之外）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">//使用Lock手动加锁</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line">class A&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        testLock testLock = new testLock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        new Thread(testLock).start();</span><br><span class="line">        new Thread(testLock).start();</span><br><span class="line">        new Thread(testLock).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class testLock implements Runnable&#123;</span><br><span class="line">    int ticketNums = 10;</span><br><span class="line"></span><br><span class="line">    private final ReentrantLock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                lock.lock();//加锁</span><br><span class="line">                if (ticketNums &gt; 0) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(1000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(ticketNums--);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                lock.unlock();//解锁</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h2 id="线程协作（生产者消费者）"><a href="#线程协作（生产者消费者）" class="headerlink" title="线程协作（生产者消费者）"></a>线程协作（生产者消费者）</h2><ul><li>解决方式一 （并发写作模型 生产者消费者模式 —-&gt;管理法）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">package 多线程;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//利用缓冲区解决:管程法</span><br><span class="line">public class testPc &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SynContainer container = new SynContainer();</span><br><span class="line">        new Productor(container).start();</span><br><span class="line">        new consumer(container).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Productor extends Thread&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    public Productor(SynContainer sysContainer)&#123;</span><br><span class="line">        this.container = sysContainer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            System.out.println(&quot;生产了&quot;+(i+1)+&quot;只鸡&quot;);</span><br><span class="line">            container.push(new Chicken(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class consumer extends Thread&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    public consumer(SynContainer sysContainer)&#123;</span><br><span class="line">        this.container = sysContainer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            System.out.println(&quot;消费了&quot;+(container.pop().id+1)+&quot;只鸡&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Chicken&#123;</span><br><span class="line">    int id;</span><br><span class="line"></span><br><span class="line">    public Chicken(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class SynContainer&#123;</span><br><span class="line">    Chicken[] chickens=new Chicken[10];</span><br><span class="line">    int count=0;</span><br><span class="line">    //生产者</span><br><span class="line">    public synchronized void push(Chicken chicken) &#123;</span><br><span class="line">        while (count == chickens.length) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //等待</span><br><span class="line">                this.wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line">        //通知消费者消费</span><br><span class="line">        this.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    //消费者</span><br><span class="line">    public synchronized Chicken pop() &#123;</span><br><span class="line">        while (count == 0) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                this.wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        Chicken chicken = chickens[count];</span><br><span class="line">        //通知生产者生产</span><br><span class="line">        this.notifyAll();</span><br><span class="line">        return chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><ul><li><p>解决方法2：并发协作模型 信号灯法</p><ul><li>通过标志位判断状态</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package 多线程;</span><br><span class="line"></span><br><span class="line">public class testPc2 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Tv tv = new Tv();</span><br><span class="line">        new YanYuan(tv).start();</span><br><span class="line">        new GuanZhong(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class YanYuan extends Thread&#123;</span><br><span class="line">    Tv tv;</span><br><span class="line">    public YanYuan(Tv tv)&#123;</span><br><span class="line">        this.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 20; i++) &#123;</span><br><span class="line">            if (i%2==0)&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    this.tv.BiaoYan(&quot;大本营&quot;);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    this.tv.BiaoYan(&quot;抖音&quot;);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class GuanZhong extends Thread&#123;</span><br><span class="line">    Tv tv;</span><br><span class="line"></span><br><span class="line">    public GuanZhong(Tv tv)&#123;</span><br><span class="line">        this.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 20; i++) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                tv.GuanKan();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Tv&#123;</span><br><span class="line">    //if true  需要表演</span><br><span class="line">    //else 需要观看</span><br><span class="line">    boolean flag = true;</span><br><span class="line">    String TvName;</span><br><span class="line"></span><br><span class="line">    public synchronized void BiaoYan(String tvName) throws InterruptedException &#123;</span><br><span class="line">        while (!flag)&#123;</span><br><span class="line">            this.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;演员正在上映&quot;+tvName+&quot;节目&quot;);</span><br><span class="line">        this.notifyAll();</span><br><span class="line">        this.TvName = tvName;</span><br><span class="line">        this.flag = !this.flag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized void GuanKan() throws InterruptedException &#123;</span><br><span class="line">        while (flag)&#123;</span><br><span class="line">            this.wait();</span><br><span class="line">        &#125;</span><br><span class="line">            System.out.println(&quot;观众正在观看&quot;+this.TvName+&quot;节目&quot;);</span><br><span class="line">            this.flag = !this.flag;</span><br><span class="line">            this.notifyAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li></ul><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">public class pool &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    //声明线程池对象及大小</span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(10);</span><br><span class="line">//执行</span><br><span class="line">        service.execute(new testPool());</span><br><span class="line">        service.execute(new testPool());</span><br><span class="line">        service.execute(new testPool());</span><br><span class="line">        service.execute(new testPool());</span><br><span class="line">        service.execute(new testPool());</span><br><span class="line">//关闭</span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class testPool implements Runnable&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell命令</title>
      <link href="/2023/05/22/shell%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/05/22/shell%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Shell-脚本语言学习笔记"><a href="#Shell-脚本语言学习笔记" class="headerlink" title="Shell 脚本语言学习笔记"></a>Shell 脚本语言学习笔记</h1><h4 id="echo-输出内容支持换行"><a href="#echo-输出内容支持换行" class="headerlink" title="echo 输出内容支持换行"></a>echo 输出内容支持换行</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 默认情况下，echo关闭了对转移字符的解释，添加-e参数可打开echo对转义字符串的解释功能。-E关闭转义字符，是默认值</span><br><span class="line">echo -e &quot;输出内容\n&quot;   </span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="rwx权限对应数字"><a href="#rwx权限对应数字" class="headerlink" title="rwx权限对应数字"></a>rwx权限对应数字</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rwx权限对应数字：r=4，w=2，x=1。</span><br><span class="line"></span><br><span class="line">通过4、2、1的组合相加，得到以下几种权限：</span><br><span class="line"></span><br><span class="line">0：没有权限；</span><br><span class="line">4：读取权限；</span><br><span class="line">5：读取+执行；</span><br><span class="line">6：读取+写入；</span><br><span class="line">7：读取+写入+执行。</span><br><span class="line"></span><br><span class="line">而777、776、770、466、444等是有上面组合相加后的组合，个十百位分别表示用户User、组Group、及其它Other的权限。</span><br><span class="line"></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="read"><a href="#read" class="headerlink" title="read"></a>read</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">选项说明：</span><br><span class="line">-a：将分裂后的字段依次存储到指定的数组中，存储的起始位置从数组的index=0开始。</span><br><span class="line">-d：指定读取行的结束符号。默认结束符号为换行符。</span><br><span class="line">-n：限制读取N个字符就自动结束读取，如果没有读满N个字符就按下回车或遇到换行符，则也会结束读取。</span><br><span class="line">-N：严格要求读满N个字符才自动结束读取，即使中途按下了回车或遇到了换行符也不结束。其中换行符或回车算一个字符。</span><br><span class="line">-p：给出提示符。默认不支持&quot;\n&quot;换行，要换行需要特殊处理，见下文示例。例如，&quot;-p 请输入密码：&quot;</span><br><span class="line">-r：禁止反斜线的转义功能。这意味着&quot;\&quot;会变成文本的一部分。</span><br><span class="line">-s：静默模式。输入的内容不会回显在屏幕上。</span><br><span class="line">-t：给出超时时间，在达到超时时间时，read退出并返回错误。也就是说不会读取任何内容，即使已经输入了一部分。-u：从给定文件描述符(fd=N)中读取数据。</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><ul><li><p>-p 提示信息换行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#还有$后接单引号的$&#x27;string&#x27;，这在bash中被特殊对待：会将某些反斜线序列(如\n，\t，\&quot;，\&#x27;等)继续转义，而不认为它是字面符号(如果没有$符号，单引号会强制将string翻译为字面符号，包括反斜线)</span><br><span class="line">read -p $&#x27;输出内容\n&#x27;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li><li><p>读取多行值</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read -p $&#x27;请输入arg1，arg2的值，中间以空格隔开:&#x27; arg1 arg2</span><br><span class="line">echo &quot;arg1 = &quot;$arg1</span><br><span class="line">echo &quot;arg2 = &quot;$arg2</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="定义变量与清除变量"><a href="#定义变量与清除变量" class="headerlink" title="定义变量与清除变量"></a>定义变量与清除变量</h4><ul><li><p>变量定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名=变量值    # 注意中间不要打空格</span><br><span class="line">num=10</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li><li><p>清除变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unset 变量名</span><br><span class="line">unset num</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read -p $&#x27;请输入num值：\n&#x27; num    #从键盘获取变量值</span><br><span class="line">echo &quot;num 的值是：  &quot;$num</span><br><span class="line">unset num                       #清除变量值</span><br><span class="line">echo &quot;num 的值是：  &quot;$num</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-SFi0DV9t-1650241328286)(C:\Users\11066\AppData\Roaming\Typora\typora-user-images\image-20220411204522703.png)]</p></li></ul><h3 id="变量的查看"><a href="#变量的查看" class="headerlink" title="变量的查看"></a>变量的查看</h3><h4 id="查看所有变量-：set"><a href="#查看所有变量-：set" class="headerlink" title="查看所有变量 ：set"></a>查看所有变量 ：set</h4><p>set命令输出所有的变量，包括全局变量和局部变量</p><h4 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h4><p><code>env</code>命令只显示全局变量</p><h4 id="查看所有的变量，函数，整数，和已经导出的变量"><a href="#查看所有的变量，函数，整数，和已经导出的变量" class="headerlink" title="查看所有的变量，函数，整数，和已经导出的变量"></a>查看所有的变量，函数，整数，和已经导出的变量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">declare #命令输出所有的变量，函数，整数，和已经导出的变量</span><br><span class="line">set -o #命令显示bashShell的所有参数配置信息</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h3 id="自定义环境变量"><a href="#自定义环境变量" class="headerlink" title="自定义环境变量"></a>自定义环境变量</h3><h4 id="暂时设定环境变量"><a href="#暂时设定环境变量" class="headerlink" title="暂时设定环境变量"></a>暂时设定环境变量</h4><p>如果想设置环境变量，就要给在给变量赋值后或在设置变量时使用export命令，export命令和declare命令的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export 变量名=value</span><br><span class="line">变量名=value ; export 变量名</span><br><span class="line">declare - x 变量名=value</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="永久设定环境变量"><a href="#永久设定环境变量" class="headerlink" title="永久设定环境变量"></a>永久设定环境变量</h4><ul><li>用户环境变量配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 [root@king scripts]# ls /root/.bashrc</span><br><span class="line">2 /root/.bashrc</span><br><span class="line">3 [root@king scripts]# ls /root/.bash_profile</span><br><span class="line">4 /root/.bash_profile</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>说明： 对于用户的环境变量设置，常见的是用户家目录下的.bashrc和.bash_profile</p><ul><li><p>全局环境变量的配置</p><p>常见的全局环境变量配置文件，<code>/etc/profile;/etc/bashrc;/etc/profile.d</code>这三个配置文件，如果想要在登陆后初始化或者显示加载的内容，只需要把脚本文件放在<code>/etc/profile.d</code>文件下即可（不需要加执行权限）</p><p>在Java环境中，自定义环境变量，通常放在&#x2F;etc&#x2F;profile全局环境变量里，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/application/jdk</span><br><span class="line">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$PATH:$HOME/bin</span><br><span class="line">export RESIN_HOME=/application/resin　</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li></ul><h4 id="查看-x2F-取消环境变量"><a href="#查看-x2F-取消环境变量" class="headerlink" title="查看&#x2F;取消环境变量"></a>查看&#x2F;取消环境变量</h4><p>我们通常在工作中要查看一下环境变量中都配置了什么，需要做什么更改，所以我们就有了ehco或printf命令来打印查看环境变量。</p><p><code>$HOME</code>:用户登录时进入的目录<br><code>$UID</code>:当前用户的uid（ 也就是用户的标识，相当于人的身份证）相当于id -u</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[king@king ~]$ echo $HOME</span><br><span class="line">/home/king</span><br><span class="line">[king@king ~]$ echo $UID</span><br><span class="line">300</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>我们可以用unset来消除本地变量和环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[king@king ~]$ echo $USER</span><br><span class="line">nane</span><br><span class="line">[king@king ~]$ unset $USER</span><br><span class="line">[king@king ~]$ echo  $USER  #&lt;这里输出是个空行</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>变量名一定要大写，可以在自身的Shell及子Shell中使用，常用export来定义环境变量<br>执行enc默认可以显示所有的环境变量名称及对应的值<br>输出时用“$变量名”，取消用“unset 变量名”</p><p>双引号：可以解析变量的值</p><p>单引号：不能解析变量的值</p><h3 id="预设变量"><a href="#预设变量" class="headerlink" title="预设变量"></a>预设变量</h3><h4 id="shell直接提供无需定义的变量"><a href="#shell直接提供无需定义的变量" class="headerlink" title="shell直接提供无需定义的变量"></a>shell直接提供无需定义的变量</h4><p><a href="https://img-blog.csdnimg.cn/20200420213544763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI4ODIwMQ==,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/20200420213544763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI4ODIwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></a></p><p><a href="https://img-blog.csdnimg.cn/20200420213544763.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI4ODIwMQ==,size_16,color_FFFFFF,t_70">在这里插入图片描述</a></p><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;参数的个数=$#&quot;</span><br><span class="line">echo &quot;参数的内容=$*&quot;</span><br><span class="line">echo &quot;第一个参数：$1&quot;</span><br><span class="line">echo &quot;第一个参数：$2&quot;</span><br><span class="line">echo &quot;第一个参数：$3&quot;</span><br><span class="line">echo &quot;进程号$$&quot;</span><br><span class="line">echo &quot;进程名$0&quot;</span><br><span class="line">echo &quot;50*30的结果$?&quot;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h3 id="脚本标量的特殊用法"><a href="#脚本标量的特殊用法" class="headerlink" title="脚本标量的特殊用法"></a>脚本标量的特殊用法</h3><p><a href="https://img-blog.csdnimg.cn/2020042021540169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI4ODIwMQ==,size_16,color_FFFFFF,t_70"><img src="https://img-blog.csdnimg.cn/2020042021540169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI4ODIwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></a></p><p><a href="https://img-blog.csdnimg.cn/2020042021540169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzI4ODIwMQ==,size_16,color_FFFFFF,t_70">在这里插入图片描述</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;今天是`date`&quot;    #反引号中的内容作为系统命令，并执行其内容可替换输出为一个变量</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><ul><li>（） 子shell执行 不影响当前shell</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">data=10</span><br><span class="line">(</span><br><span class="line">  data=100</span><br><span class="line">  echo &quot;data=$data&quot;</span><br><span class="line">  echo &quot;子shell&quot;</span><br><span class="line">)</span><br><span class="line">echo &quot;父shell data=$data&quot;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-0hnD29GI-1650241328287)(C:\Users\11066\AppData\Roaming\Typora\typora-user-images\image-20220412185103521.png)]</p><ul><li>{} 在当前shell中执行，会影响变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">data=10</span><br><span class="line">&#123;</span><br><span class="line">  data=100</span><br><span class="line">  echo &quot;data=$data&quot;</span><br><span class="line">  echo &quot;子shell&quot;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;父shell data=$data&quot;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cDZNWYTb-1650241328288)(C:\Users\11066\AppData\Roaming\Typora\typora-user-images\image-20220412185203264.png)]</p><h3 id="变量的扩展"><a href="#变量的扩展" class="headerlink" title="变量的扩展"></a>变量的扩展</h3><h4 id="判断变量是否存在"><a href="#判断变量是否存在" class="headerlink" title="判断变量是否存在"></a>判断变量是否存在</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># $&#123;num:-val&#125;如果num存在，输出num否在输出val</span><br><span class="line">echo $&#123;num:-1&#125;</span><br><span class="line">num=200</span><br><span class="line">echo $&#123;num:-1&#125;</span><br><span class="line">Copy</span><br><span class="line">#!/bin/bash</span><br><span class="line"># $&#123;num:=val&#125;如果num存在，输出num,否则输出val并赋值num为val值</span><br><span class="line">echo $&#123;num:-1&#125;</span><br><span class="line">num=200</span><br><span class="line">echo $&#123;num:-1&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">str=&quot;1 this is test code 1&quot;</span><br><span class="line"># 测量字符串长度$&#123;#str&#125;</span><br><span class="line">echo &quot;the length of str is $&#123;#str&#125;&quot;</span><br><span class="line"># 从下标3的位置提取$&#123;str:3&#125;</span><br><span class="line">echo $&#123;str:3&#125;</span><br><span class="line"># 从下标为3的位置提取长度为6字节</span><br><span class="line">echo $&#123;str:3:6&#125;</span><br><span class="line">#$&#123;str/old/new&#125; 用new替换str中出现的第一个old</span><br><span class="line">echo $&#123;str/test/dome&#125;</span><br><span class="line">#$&#123;str//old/new&#125;用new 替换str中出现的所有old</span><br><span class="line">echo $&#123;str//1/&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GPbX3eqw-1650241328288)(C:\Users\11066\AppData\Roaming\Typora\typora-user-images\image-20220412191325681.png)]</p><h4 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h4><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-8hUzUnOj-1650241328289)(C:\Users\11066\AppData\Roaming\Typora\typora-user-images\image-20220413111931184.png)]</p><ul><li><p>linux中 返回值为0 是true 1为false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">test -e test.sh # 测试是否存在文件</span><br><span class="line">echo $?   #返回上一条语句执行结果</span><br><span class="line"></span><br><span class="line">#[condition]   []中加条件判断</span><br><span class="line">[-e test.sh]  # 同 test -e test.sh</span><br><span class="line"></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">read str1 str2</span><br><span class="line"># 判断字符串是否相同</span><br><span class="line">[ $str1 = $str2 ]  #注意[] 前后空格</span><br><span class="line">echo $?</span><br><span class="line">[ -z $str1 ] #判断str1是否为空数值测试</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li></ul><h4 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a>数值测试</h4><p>格式 test num1 num_operator num2</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-OjQxnR2X-1650241328289)(C:\Users\11066\AppData\Roaming\Typora\typora-user-images\image-20220413113450881.png)]</p><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">[ 1 -eq 1 ]  # 1=1 是否成立</span><br><span class="line">echo $?</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="符合语句测试"><a href="#符合语句测试" class="headerlink" title="符合语句测试"></a>符合语句测试</h4><p><a href="file:///C:/Users/11066/AppData/Roaming/Typora/typora-user-images/image-20220413113732020.png"><img src="file:///C:/Users/11066/AppData/Roaming/Typora/typora-user-images/image-20220413113732020.png" alt="image-20220413113732020">image-20220413113732020</a></p><p>案例</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-LNAyZC73-1650241328290)(C:\Users\11066\AppData\Roaming\Typora\typora-user-images\image-20220413113718688.png)]</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-t0n6z0s7-1650241328291)(C:\Users\11066\AppData\Roaming\Typora\typora-user-images\image-20220413113843699.png)]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test 1 -eq 1 -a 1 -ge 0 || echo ???   # 1 = 1 and 1&gt;=0 成立 不执行echo ？？？</span><br><span class="line"></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h3 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h3><h4 id="if控制语句"><a href="#if控制语句" class="headerlink" title="if控制语句"></a>if控制语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">格式一：</span><br><span class="line">if [条件1]; then</span><br><span class="line">    执行第一段程序</span><br><span class="line">else</span><br><span class="line">    执行第二段程序</span><br><span class="line">fi</span><br><span class="line">格式二：</span><br><span class="line">if [条件1]; then</span><br><span class="line">    执行第一段程序</span><br><span class="line">elif [条件2]；then</span><br><span class="line">执行第二段程序</span><br><span class="line">else</span><br><span class="line">    执行第三段程序</span><br><span class="line">fi</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">read -p $&#x27;请输入文件夹名称：\n&#x27; filename</span><br><span class="line">if [ -e $filename ];then</span><br><span class="line">echo &quot;$filename存在 即将进入文件夹&quot;</span><br><span class="line">cd $filename</span><br><span class="line">echo &quot;即将创建测试文件&quot;</span><br><span class="line">touch dome.sh   #创建新的空文件夹</span><br><span class="line">else</span><br><span class="line">echo &quot;$filename 不存在，即将创建文件夹&quot;</span><br><span class="line">mkdir $filename</span><br><span class="line">echo &quot;创建文件夹成功，即将进入&quot;</span><br><span class="line">cd $filename</span><br><span class="line">echo &quot;即将创建测试文件&quot;</span><br><span class="line">touch dome.sh   #创建新的空文件夹</span><br><span class="line">fi</span><br><span class="line">tree</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="case（java中switch-case）"><a href="#case（java中switch-case）" class="headerlink" title="case（java中switch case）"></a>case（java中switch case）</h4><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">case 变量 in &quot;指定值1&quot;)  # 若变量与指定值相同，则执行程序段1</span><br><span class="line">程序段1</span><br><span class="line">;;                 # 相当于break</span><br><span class="line">指定值2)</span><br><span class="line">程序段2</span><br><span class="line">;;</span><br><span class="line">指定值3)</span><br><span class="line">程序段3</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">Copy</span><br><span class="line">read -p $&#x27;请输入变量的值：\n&#x27; num</span><br><span class="line">case $num in 1|&#x27;一&#x27;|&#x27;壹&#x27;)</span><br><span class="line">echo &quot;输入了1&quot;</span><br><span class="line">;;</span><br><span class="line">2|&#x27;二&#x27;|&#x27;贰&#x27;)</span><br><span class="line">echo &quot;输入了2&quot;</span><br><span class="line">;;</span><br><span class="line">3|&#x27;三&#x27;|&#x27;叁&#x27;)</span><br><span class="line">echo &quot;输入了3&quot;</span><br><span class="line">esac</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>形式一：</p><p>for((初始值;限制值;执行步长))</p><p> do</p><p> 程序段</p><p> done</p><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">declare -i sum=0                    #定义int类型变量</span><br><span class="line">declare -i i;</span><br><span class="line">for((int i=0;i&lt;=100;i++))</span><br><span class="line">    do</span><br><span class="line">        sum+=$i;</span><br><span class="line">        done</span><br><span class="line">    echo &quot;sum=$sum&quot;  #5050</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>形式二</p><p>for var in con1 con2 con3</p><p>do</p><p> 程序段</p><p>done</p><ul><li>例子</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for filename in `ls`   #遍历当前目录下文件名</span><br><span class="line">    do</span><br><span class="line">        if [-d $filename];then</span><br><span class="line">            echo &quot;$filename是文件夹&quot;</span><br><span class="line">            elif [-f $filename];then</span><br><span class="line">            echo &quot;$filename是普通文件&quot;</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><ul><li>while 循环当条件不满足循环停止循环</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">代码块</span><br><span class="line">done</span><br><span class="line">Copy</span><br><span class="line">#!/bin/bash</span><br><span class="line">i = 0</span><br><span class="line">while [ $i -le 100]</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">let i+=1         #let命令用于指定算术运算,即 let expretion。</span><br><span class="line">done</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h4 id="until"><a href="#until" class="headerlink" title="until"></a>until</h4><ul><li>until 循环 当循环满足条件 停止循环</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">i=0</span><br><span class="line">until [ i -le 10 ]</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>格式一</li></ul><p>函数名（）{</p><p>命令…</p><p>}</p><ul><li>格式二</li></ul><p>function 函数名（）{</p><p>命令…</p><p>}</p><p>函数调用 函数名 $param1 $param2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">function test()&#123;</span><br><span class="line">echo &quot;第一个参数为$1&quot;   $1 接收第一个参数</span><br><span class="line">&#125;</span><br><span class="line">test 100</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 找出两个数的最大值</span><br><span class="line">function max_value()&#123;</span><br><span class="line">        if [ $1 -ge $2 ];then</span><br><span class="line">                return $1</span><br><span class="line">        else return $2</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line">read -p $&#x27;请输入第一个值:\n&#x27; param1</span><br><span class="line">read -p $&#x27;请输入第二个值:\n&#x27; param2</span><br><span class="line">max_value $param1 $param2</span><br><span class="line">echo &quot;俩个数中最大值为$?&quot;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>函数导入source 文件名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 找出两个数的最大值</span><br><span class="line">function max_value()&#123;</span><br><span class="line">        if [ $1 -ge $2 ];then</span><br><span class="line">                return $1</span><br><span class="line">        else return $2</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>命令…</p><p>}</p><p>函数调用 函数名 $param1 $param2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">function test()&#123;</span><br><span class="line">echo &quot;第一个参数为$1&quot;   $1 接收第一个参数</span><br><span class="line">&#125;</span><br><span class="line">test 100</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 找出两个数的最大值</span><br><span class="line">function max_value()&#123;</span><br><span class="line">        if [ $1 -ge $2 ];then</span><br><span class="line">                return $1</span><br><span class="line">        else return $2</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line">read -p $&#x27;请输入第一个值:\n&#x27; param1</span><br><span class="line">read -p $&#x27;请输入第二个值:\n&#x27; param2</span><br><span class="line">max_value $param1 $param2</span><br><span class="line">echo &quot;俩个数中最大值为$?&quot;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>函数导入source 文件名</p><ul><li><p>test.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 找出两个数的最大值</span><br><span class="line">function max_value()&#123;</span><br><span class="line">        if [ $1 -ge $2 ];then</span><br><span class="line">                return $1</span><br><span class="line">        else return $2</span><br><span class="line">        fi</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li><li><p>test2.sh<br>`&#96;&#96;<br>#!&#x2F;bin&#x2F;bash<br>source test.sh</p></li></ul><p>read -p $’请输入第一个值:\n’ param1<br>read -p $’请输入第二个值:\n’ param2</p><p>max_value $param1 $param2<br>echo “两个数中最大值为$?”</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker部署mysql</title>
      <link href="/2023/05/22/docker%E9%83%A8%E7%BD%B2mysql/"/>
      <url>/2023/05/22/docker%E9%83%A8%E7%BD%B2mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在宿主机Host的终端执行：<br>1、 搜索docker镜像仓库中提供的mysql<br><code>docker search mysql</code></p><p>2、下载mysql镜像<br><code>docker pull mysql</code></p><p>3、改变目录权限，非必须<br>可以先执行第四步，到第五步时发现容器的状态时是Exited时，执行第六步来查看原因。<br>如果提示无权限访问时，则需要补上本步骤，这是因为开启SELinux enabled时权限控制更严格所导致<br><code>chcon -Rt svirt_sandbox_file_t /data/mysql</code></p><p>4、创建并运行mysql容器<br><code>docker run -d --name myMysql -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 mysql</code><br>无论是否运行成功，均会得到容器ID<br>稍微解释一下：</p><blockquote><p>-d 表示在后台运行容器<br>–name 表示为后台运行的容器取别名，便于后续的操作<br>-v 用来指定数据卷，将正在运行mysql的容器上的&#x2F;var&#x2F;lib&#x2F;mysql目录映射到宿主机上的&#x2F;data&#x2F;mysql目录</p></blockquote><p>5、查看容器的运行状态<br><code>docker ps 或 docker ps -a</code></p><blockquote><p>CONTAINER ID #容器ID<br>IMAGE #镜像名称<br>COMMAND #执行的cmd<br>CREATED #创建了多久<br>STATUS #容器的status：Up(正在运行) or Exited(不在运行)<br>PORTS #端口映射情况，默认tcp<br>NAMES #容器别名</p></blockquote><p>6、查看容器的运行日志<br><code>docker logs myMysql</code><br>有些系统中，如果没有设置第三步，可能运行mysql会失败，失败原因可以通过查看容器的运行日志来了解。</p><p>7、与容器进行交互<br><code>docker exec -t -i myMysql /bin/bash</code><br>执行之后会获得容器内的&#x2F;bin&#x2F;bash终端，<br>root@35e1fab30962:&#x2F;#，其中35e1fab30962是容器ID<br>此时就可以在这里执行mysql命令了<br>Demo：</p><p>root@35e1fab30962:&#x2F;# mysql -uroot -p<br>#输入之前设置的密码，此处为123456，输入正确后进入到mysql中<br>mysql&gt; use mysql;<br>mysql&gt; select * from user\G;<br>8、停止正在运行的mysql容器<br><code>docker stop myMysql</code></p><p>9、启动已创建的mysql容器<br>docker start myMysql</p><p>10、mysql容器的数据导出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec myMysql sh -c &#x27;exec mysqldump --all-databases -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &gt; /some/path/on/your/host/all-databases.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
